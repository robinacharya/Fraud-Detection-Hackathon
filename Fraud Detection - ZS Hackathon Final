{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "75241bbc",
   "metadata": {
    "papermill": {
     "duration": 0.033143,
     "end_time": "2024-07-13T15:27:25.577585",
     "exception": false,
     "start_time": "2024-07-13T15:27:25.544442",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Table of Contents<a id=\"back-to-table-of-contents\"></a>\n",
    "\n",
    "1. [Introduction](#introduction)\n",
    "1. [Problem Description](#problem-description)\n",
    "1. [Import Libraries](#import-libraries)\n",
    "1. [Download Datasets](#download-dataset)\n",
    "1. [Data Read](#data-read)\n",
    "1. [EDA](#eda)\n",
    "1. [Feature Engineering](#feature-engineering)\n",
    "   - [Feature Creation](#feature-creation)   \n",
    "   - [Feature Selection](#feature-selection)\n",
    "   - [Null Imputation](#null-imputation)\n",
    "1. [Preparing to Modeling](#preparing-to-modeling)\n",
    "   - [Encoding Categorical Features](#encoding-categorical-features)\n",
    "   - [Creation of Training and Validation Sets](#creation-of-training-and-validaiton-sets)\n",
    "1. [Baseline models and test for all features](#baseline-models-and-test-for-all-features)\n",
    "   - [Logistic Regression](#baseline-logistic-regression)\n",
    "   - [Decision Tree Classifier](#baseline-decision-tree-classifier)\n",
    "   - [Random Forests Classifier](#baseline-random-forests-classifier)\n",
    "   - [XGB Classifier](#baseline-xgb-classifier)\n",
    "   - [LGBM Classifier](#baseline-lgbm-classifier)\n",
    "1. [Model with Hyperparameter Tuning](#models-with-hyperparameter-tuning)\n",
    "   - [Feature Importance](#feature-importance)\n",
    "1. [Final Model with Important Features](#final-models-with-important-features)\n",
    "   - [K-Fold Validation](#k-fold-validation)\n",
    "   - [Final Model Prediction](#final-model-prediction)\n",
    "1. [Conclusion](#conclusion)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3aa1cdd9",
   "metadata": {
    "papermill": {
     "duration": 0.031576,
     "end_time": "2024-07-13T15:27:25.643860",
     "exception": false,
     "start_time": "2024-07-13T15:27:25.612284",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction <a id=\"introduction\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "958f7edb",
   "metadata": {
    "papermill": {
     "duration": 0.030928,
     "end_time": "2024-07-13T15:27:25.706515",
     "exception": false,
     "start_time": "2024-07-13T15:27:25.675587",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We are living in 21st century and things around us are swiftly evolving. Technological\n",
    "advancements have made our lives a lot easier in most aspects, especially the streamlining of\n",
    "the payments. Thanks to the banking services, which have been the easiest ever since. However,\n",
    "the increase in technology invites more fraudulent practices. With so many payments happening\n",
    "all around, it is hard to track and differentiate fraudulent transactions from the legitimate ones.\n",
    "This challenge intends to solve the same problem. The goal will be to create a solution that tracks\n",
    "these payments and identify the fraudulent transactions using the information provided."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9333b70",
   "metadata": {
    "papermill": {
     "duration": 0.030127,
     "end_time": "2024-07-13T15:27:25.769180",
     "exception": false,
     "start_time": "2024-07-13T15:27:25.739053",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Problem Description <a id=\"problem-description\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3841a35a",
   "metadata": {
    "papermill": {
     "duration": 0.031665,
     "end_time": "2024-07-13T15:27:25.830967",
     "exception": false,
     "start_time": "2024-07-13T15:27:25.799302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "A college has introduced a smart system which can track all the transactions of each student.\n",
    "Transactions to each other, payments to college canteen and shops, withdrawal of cash from\n",
    "college ATM, etc. The payments can be made using online methods (net banking, cards, UPI) or\n",
    "offline (using Debit/Credit Card as POS centers). The idea behind tracking the student payments\n",
    "was to decrease the ambiguity of defaulters between the college students, making the transaction\n",
    "process smooth and safe for the students. As the system was built, a few students hacked into\n",
    "the system database and started misusing it for their own benefit. To tackle the problem, an\n",
    "existing software was brought which tracks the transactions and predicts the fraudulent ones\n",
    "which backtracks the student who performed the transaction (the hacker). This solution will make\n",
    "the solution more robust from these hackers. However, the solution was not entirely successful\n",
    "as it only flagged the transactions where the amount was more than â‚¹ 200,000.\n",
    "**The task is to create a model using the data provided, which takes in the student and transaction\n",
    "information and predicts whether the transaction is a legitimate transaction or a fraudulent\n",
    "transaction.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2ab3a1b",
   "metadata": {
    "papermill": {
     "duration": 0.031889,
     "end_time": "2024-07-13T15:27:25.946529",
     "exception": false,
     "start_time": "2024-07-13T15:27:25.914640",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import Libraries <a id=\"import-libraries\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "044ba8cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:27:26.011399Z",
     "iopub.status.busy": "2024-07-13T15:27:26.011047Z",
     "iopub.status.idle": "2024-07-13T15:27:35.416573Z",
     "shell.execute_reply": "2024-07-13T15:27:35.415545Z"
    },
    "papermill": {
     "duration": 9.440666,
     "end_time": "2024-07-13T15:27:35.418713",
     "exception": false,
     "start_time": "2024-07-13T15:27:25.978047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import gc\n",
    "import shap\n",
    "from imblearn.combine import SMOTEENN\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import xgboost as xgb\n",
    "import lightgbm as lgb\n",
    "from sklearn.metrics import precision_score, recall_score, accuracy_score, roc_auc_score, precision_recall_curve, auc, f1_score, confusion_matrix, average_precision_score\n",
    "from datetime import datetime, timedelta\n",
    "import math\n",
    "from matplotlib_venn import venn2\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "from hyperopt import hp, fmin, tpe, Trials, STATUS_OK\n",
    "from hyperopt import space_eval\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4588e889",
   "metadata": {
    "papermill": {
     "duration": 0.030989,
     "end_time": "2024-07-13T15:27:35.481299",
     "exception": false,
     "start_time": "2024-07-13T15:27:35.450310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Download Datasets <a id=\"download-dataset\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "88ebf140",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:27:35.545376Z",
     "iopub.status.busy": "2024-07-13T15:27:35.544755Z",
     "iopub.status.idle": "2024-07-13T15:27:35.554352Z",
     "shell.execute_reply": "2024-07-13T15:27:35.553047Z"
    },
    "papermill": {
     "duration": 0.044836,
     "end_time": "2024-07-13T15:27:35.556415",
     "exception": false,
     "start_time": "2024-07-13T15:27:35.511579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/zs-hackathon-dataset-eda/Sample_Submission.csv\n",
      "/kaggle/input/zs-hackathon-dataset-eda/Sender.csv\n",
      "/kaggle/input/zs-hackathon-dataset-eda/Unprocessed_Hacker_Check.xlsx\n",
      "/kaggle/input/zs-hackathon-dataset-eda/Processed_Hacker_Check.xlsx\n",
      "/kaggle/input/zs-hackathon-dataset-eda/Receiver.csv\n",
      "/kaggle/input/zs-hackathon-dataset-eda/Students.csv\n",
      "/kaggle/input/zs-hackathon-dataset-eda/Transactions.csv\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e91a4312",
   "metadata": {
    "papermill": {
     "duration": 0.03214,
     "end_time": "2024-07-13T15:27:35.620654",
     "exception": false,
     "start_time": "2024-07-13T15:27:35.588514",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Read <a id=\"data-read\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a48c7d02",
   "metadata": {
    "papermill": {
     "duration": 0.03125,
     "end_time": "2024-07-13T15:27:35.683888",
     "exception": false,
     "start_time": "2024-07-13T15:27:35.652638",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Reading all csv files**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "18f067d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:27:35.748773Z",
     "iopub.status.busy": "2024-07-13T15:27:35.748403Z",
     "iopub.status.idle": "2024-07-13T15:27:43.045264Z",
     "shell.execute_reply": "2024-07-13T15:27:43.044364Z"
    },
    "papermill": {
     "duration": 7.331589,
     "end_time": "2024-07-13T15:27:43.047152",
     "exception": false,
     "start_time": "2024-07-13T15:27:35.715563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Transactions = pd.read_csv('/kaggle/input/zs-hackathon-dataset-eda/Transactions.csv')\n",
    "Students = pd.read_csv('/kaggle/input/zs-hackathon-dataset-eda/Students.csv')\n",
    "Receiver = pd.read_csv('/kaggle/input/zs-hackathon-dataset-eda/Receiver.csv')\n",
    "Sender = pd.read_csv('/kaggle/input/zs-hackathon-dataset-eda/Sender.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e4e549a",
   "metadata": {
    "papermill": {
     "duration": 0.032088,
     "end_time": "2024-07-13T15:27:43.110921",
     "exception": false,
     "start_time": "2024-07-13T15:27:43.078833",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Reading all excel files**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "07b03dc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:27:43.175606Z",
     "iopub.status.busy": "2024-07-13T15:27:43.175225Z",
     "iopub.status.idle": "2024-07-13T15:28:28.589968Z",
     "shell.execute_reply": "2024-07-13T15:28:28.588926Z"
    },
    "papermill": {
     "duration": 45.449461,
     "end_time": "2024-07-13T15:28:28.592229",
     "exception": false,
     "start_time": "2024-07-13T15:27:43.142768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Processed_Hacker_Check = pd.read_excel('/kaggle/input/zs-hackathon-dataset-eda/Processed_Hacker_Check.xlsx')\n",
    "Unprocessed_Hacker_Check = pd.read_excel('/kaggle/input/zs-hackathon-dataset-eda/Unprocessed_Hacker_Check.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3c88ea92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:28.658791Z",
     "iopub.status.busy": "2024-07-13T15:28:28.658186Z",
     "iopub.status.idle": "2024-07-13T15:28:28.666876Z",
     "shell.execute_reply": "2024-07-13T15:28:28.666051Z"
    },
    "papermill": {
     "duration": 0.044304,
     "end_time": "2024-07-13T15:28:28.668947",
     "exception": false,
     "start_time": "2024-07-13T15:28:28.624643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Sample_Submission = pd.read_csv('/kaggle/input/zs-hackathon-dataset-eda/Sample_Submission.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bb9d921",
   "metadata": {
    "papermill": {
     "duration": 0.030812,
     "end_time": "2024-07-13T15:28:28.731834",
     "exception": false,
     "start_time": "2024-07-13T15:28:28.701022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# EDA <a id=\"eda\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4312d638",
   "metadata": {
    "papermill": {
     "duration": 0.031323,
     "end_time": "2024-07-13T15:28:28.793981",
     "exception": false,
     "start_time": "2024-07-13T15:28:28.762658",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Transactions data profiling**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7ea0b1cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:28.857507Z",
     "iopub.status.busy": "2024-07-13T15:28:28.857139Z",
     "iopub.status.idle": "2024-07-13T15:28:28.919295Z",
     "shell.execute_reply": "2024-07-13T15:28:28.918391Z"
    },
    "papermill": {
     "duration": 0.096979,
     "end_time": "2024-07-13T15:28:28.921690",
     "exception": false,
     "start_time": "2024-07-13T15:28:28.824711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TID</th>\n",
       "      <th>IdOfOrigStudent</th>\n",
       "      <th>IdOfDestStudent</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2599764</td>\n",
       "      <td>C1218556612</td>\n",
       "      <td>M1579714126</td>\n",
       "      <td>money payment</td>\n",
       "      <td>373</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>Done at super market.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1476902</td>\n",
       "      <td>C1449172216</td>\n",
       "      <td>C639646553</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>353</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>eatables</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2537234</td>\n",
       "      <td>C603557670</td>\n",
       "      <td>M324744640</td>\n",
       "      <td>money payment</td>\n",
       "      <td>8</td>\n",
       "      <td>Check</td>\n",
       "      <td>Purchased groceries</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1868301</td>\n",
       "      <td>C1336875098</td>\n",
       "      <td>C1698810627</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>346</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>Purchased groceries</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1330741</td>\n",
       "      <td>C169302510</td>\n",
       "      <td>C857180490</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>137</td>\n",
       "      <td>Check</td>\n",
       "      <td>lunch</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       TID IdOfOrigStudent IdOfDestStudent transactionType  hourStep  \\\n",
       "0  2599764     C1218556612     M1579714126   money payment       373   \n",
       "1  1476902     C1449172216      C639646553    cash outflow       353   \n",
       "2  2537234      C603557670      M324744640   money payment         8   \n",
       "3  1868301     C1336875098     C1698810627    cash outflow       346   \n",
       "4  1330741      C169302510      C857180490    cash outflow       137   \n",
       "\n",
       "  transaction_device               comments  \n",
       "0        Net Banking  Done at super market.  \n",
       "1           ATM card               eatables  \n",
       "2              Check    Purchased groceries  \n",
       "3        Net Banking    Purchased groceries  \n",
       "4              Check                  lunch  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Transactions.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c909e4a1",
   "metadata": {
    "papermill": {
     "duration": 0.031476,
     "end_time": "2024-07-13T15:28:28.986636",
     "exception": false,
     "start_time": "2024-07-13T15:28:28.955160",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Transaction table contains all transaction with Sender,Receiver time and other details arround transaction**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6f015227",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:29.051039Z",
     "iopub.status.busy": "2024-07-13T15:28:29.050712Z",
     "iopub.status.idle": "2024-07-13T15:28:29.055990Z",
     "shell.execute_reply": "2024-07-13T15:28:29.055243Z"
    },
    "papermill": {
     "duration": 0.039438,
     "end_time": "2024-07-13T15:28:29.057685",
     "exception": false,
     "start_time": "2024-07-13T15:28:29.018247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575, 7)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Transactions.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "249132e4",
   "metadata": {
    "papermill": {
     "duration": 0.031478,
     "end_time": "2024-07-13T15:28:29.120347",
     "exception": false,
     "start_time": "2024-07-13T15:28:29.088869",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Lets explore each of the input data tables starting with transaction  **univerieate analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dafab56b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:29.187786Z",
     "iopub.status.busy": "2024-07-13T15:28:29.187436Z",
     "iopub.status.idle": "2024-07-13T15:28:29.540374Z",
     "shell.execute_reply": "2024-07-13T15:28:29.539214Z"
    },
    "papermill": {
     "duration": 0.388793,
     "end_time": "2024-07-13T15:28:29.542196",
     "exception": false,
     "start_time": "2024-07-13T15:28:29.153403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped_df = Transactions.groupby(['transactionType']).size()\n",
    "\n",
    "grouped_df.plot(kind='bar', stacked=False, color=plt.cm.tab20.colors)\n",
    "\n",
    "plt.xlabel('Transaction Type')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Transaction Type Distribution')\n",
    "plt.legend(['Count'], title='Legend')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18eef3ca",
   "metadata": {
    "papermill": {
     "duration": 0.031986,
     "end_time": "2024-07-13T15:28:29.606297",
     "exception": false,
     "start_time": "2024-07-13T15:28:29.574311",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Insights from Transaction Type Distribution Chart:**\n",
    "* The bar chart reveals significant variability in transaction types.\n",
    "* \"Cash Outflow\" is notably predominant, indicating a high frequency of transactions.\n",
    "* Conversely, \"Debit to Account\" emerges as the least frequent transaction type.\n",
    "* \"Money Payment\" and \"Cash Inflow\" exhibit similar proportions, suggesting comparable frequencies.\n",
    "* \"Money Transfer\" falls between these two, indicating a frequency similar to both.\n",
    "* Overall, the visualization effectively showcases the distribution of transaction activities, emphasizing the varying prevalence of each type within the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86390a53",
   "metadata": {
    "papermill": {
     "duration": 0.032583,
     "end_time": "2024-07-13T15:28:29.671461",
     "exception": false,
     "start_time": "2024-07-13T15:28:29.638878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Let's do the same for transaction device"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6b8e740e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:29.738507Z",
     "iopub.status.busy": "2024-07-13T15:28:29.738177Z",
     "iopub.status.idle": "2024-07-13T15:28:29.942451Z",
     "shell.execute_reply": "2024-07-13T15:28:29.941381Z"
    },
    "papermill": {
     "duration": 0.239892,
     "end_time": "2024-07-13T15:28:29.944578",
     "exception": false,
     "start_time": "2024-07-13T15:28:29.704686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped_df = Transactions.groupby(['transaction_device']).size()\n",
    "\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.pie(grouped_df, labels=grouped_df.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.tab20.colors)\n",
    "plt.title('Transaction Device Distribution')\n",
    "plt.axis('equal') \n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6443070c",
   "metadata": {
    "papermill": {
     "duration": 0.037469,
     "end_time": "2024-07-13T15:28:30.023646",
     "exception": false,
     "start_time": "2024-07-13T15:28:29.986177",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Insights from Transaction Device Distribution Pie Chart:**\n",
    "\n",
    "* The pie chart illustrates uniform distribution among transaction devices.\n",
    "* ATM card, Net banking, Check, and UPI contribute equally to transaction activities."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daa39fae",
   "metadata": {
    "papermill": {
     "duration": 0.032139,
     "end_time": "2024-07-13T15:28:30.088388",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.056249",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "*** How about the comments!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "11c5b66c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:30.156215Z",
     "iopub.status.busy": "2024-07-13T15:28:30.155892Z",
     "iopub.status.idle": "2024-07-13T15:28:30.519878Z",
     "shell.execute_reply": "2024-07-13T15:28:30.518876Z"
    },
    "papermill": {
     "duration": 0.400661,
     "end_time": "2024-07-13T15:28:30.521710",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.121049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped_df = Transactions.groupby(['comments']).size()\n",
    "\n",
    "grouped_df.plot(kind='bar', stacked=False, color=plt.cm.tab20.colors)\n",
    "\n",
    "plt.xlabel('Comments')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Comments Distribution')\n",
    "plt.legend(['Count'], title='Legend')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d0bf205",
   "metadata": {
    "papermill": {
     "duration": 0.032887,
     "end_time": "2024-07-13T15:28:30.587884",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.554997",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Insights from Comments Bar Chart:**\n",
    "\n",
    "* Uniform distribution is evident among comments.\n",
    "* Each comment category exhibits equal frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ea000488",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:30.655149Z",
     "iopub.status.busy": "2024-07-13T15:28:30.654831Z",
     "iopub.status.idle": "2024-07-13T15:28:30.665666Z",
     "shell.execute_reply": "2024-07-13T15:28:30.664837Z"
    },
    "papermill": {
     "duration": 0.046693,
     "end_time": "2024-07-13T15:28:30.667384",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.620691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StudentId</th>\n",
       "      <th>StudentName</th>\n",
       "      <th>StudentAge</th>\n",
       "      <th>StudentYear</th>\n",
       "      <th>TransactionFrequency</th>\n",
       "      <th>NumberOfTransactionsTillDate</th>\n",
       "      <th>AccountType</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C1130750255</td>\n",
       "      <td>Student 760545</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "      <td>LOW</td>\n",
       "      <td>222</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M2085671623</td>\n",
       "      <td>Student 1516264</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>904</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C897613561</td>\n",
       "      <td>Student 454746</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>LOW</td>\n",
       "      <td>336</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M1083150097</td>\n",
       "      <td>Student 658729</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>LOW</td>\n",
       "      <td>589</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>C328009056</td>\n",
       "      <td>Student 1468809</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>MEDIUM</td>\n",
       "      <td>608</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     StudentId      StudentName  StudentAge  StudentYear TransactionFrequency  \\\n",
       "0  C1130750255   Student 760545          27            2                  LOW   \n",
       "1  M2085671623  Student 1516264          21            1                 HIGH   \n",
       "2   C897613561   Student 454746          25            4                  LOW   \n",
       "3  M1083150097   Student 658729          10            1                  LOW   \n",
       "4   C328009056  Student 1468809          14            1               MEDIUM   \n",
       "\n",
       "   NumberOfTransactionsTillDate   AccountType  \n",
       "0                           222    INDIVIDUAL  \n",
       "1                           904    INDIVIDUAL  \n",
       "2                           336  JOINT/SHARED  \n",
       "3                           589    INDIVIDUAL  \n",
       "4                           608  JOINT/SHARED  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Students.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "97b89305",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:30.736851Z",
     "iopub.status.busy": "2024-07-13T15:28:30.736506Z",
     "iopub.status.idle": "2024-07-13T15:28:30.742375Z",
     "shell.execute_reply": "2024-07-13T15:28:30.741510Z"
    },
    "papermill": {
     "duration": 0.04268,
     "end_time": "2024-07-13T15:28:30.744022",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.701342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1761131, 7)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Students.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fb92dab8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:30.813546Z",
     "iopub.status.busy": "2024-07-13T15:28:30.813192Z",
     "iopub.status.idle": "2024-07-13T15:28:30.824560Z",
     "shell.execute_reply": "2024-07-13T15:28:30.823665Z"
    },
    "papermill": {
     "duration": 0.048394,
     "end_time": "2024-07-13T15:28:30.826598",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.778204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>oldBalanceOfDestStudent</th>\n",
       "      <th>newBalanceOfDestStudent</th>\n",
       "      <th>transactionAmount</th>\n",
       "      <th>TID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1010326.54</td>\n",
       "      <td>1239516.27</td>\n",
       "      <td>229189.73</td>\n",
       "      <td>2568290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>855024.26</td>\n",
       "      <td>537399.49</td>\n",
       "      <td>317624.76</td>\n",
       "      <td>1804016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>108176.47</td>\n",
       "      <td>0.00</td>\n",
       "      <td>138650.15</td>\n",
       "      <td>1724210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1303598.66</td>\n",
       "      <td>1615237.93</td>\n",
       "      <td>311639.27</td>\n",
       "      <td>1079731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>252497.01</td>\n",
       "      <td>277853.37</td>\n",
       "      <td>25356.36</td>\n",
       "      <td>2443397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   oldBalanceOfDestStudent  newBalanceOfDestStudent  transactionAmount  \\\n",
       "0               1010326.54               1239516.27          229189.73   \n",
       "1                855024.26                537399.49          317624.76   \n",
       "2                108176.47                     0.00          138650.15   \n",
       "3               1303598.66               1615237.93          311639.27   \n",
       "4                252497.01                277853.37           25356.36   \n",
       "\n",
       "       TID  \n",
       "0  2568290  \n",
       "1  1804016  \n",
       "2  1724210  \n",
       "3  1079731  \n",
       "4  2443397  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Receiver.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "66b9834f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:30.902730Z",
     "iopub.status.busy": "2024-07-13T15:28:30.902377Z",
     "iopub.status.idle": "2024-07-13T15:28:30.909392Z",
     "shell.execute_reply": "2024-07-13T15:28:30.908676Z"
    },
    "papermill": {
     "duration": 0.048959,
     "end_time": "2024-07-13T15:28:30.914510",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.865551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575, 4)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Receiver.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c46e1f07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:30.986230Z",
     "iopub.status.busy": "2024-07-13T15:28:30.985848Z",
     "iopub.status.idle": "2024-07-13T15:28:31.003523Z",
     "shell.execute_reply": "2024-07-13T15:28:31.002742Z"
    },
    "papermill": {
     "duration": 0.05624,
     "end_time": "2024-07-13T15:28:31.005624",
     "exception": false,
     "start_time": "2024-07-13T15:28:30.949384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>oldBalanceOfOrigStudent</th>\n",
       "      <th>newBalanceOfOrigStudent</th>\n",
       "      <th>transactionAmount</th>\n",
       "      <th>TID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60509.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>101169.77</td>\n",
       "      <td>5800266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2333.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>817771.56</td>\n",
       "      <td>526223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>196033.92</td>\n",
       "      <td>142459.52</td>\n",
       "      <td>53574.41</td>\n",
       "      <td>2858622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14308.84</td>\n",
       "      <td>4993209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37840.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>90243.47</td>\n",
       "      <td>1901957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   oldBalanceOfOrigStudent  newBalanceOfOrigStudent  transactionAmount  \\\n",
       "0                 60509.00                     0.00          101169.77   \n",
       "1                  2333.00                     0.00          817771.56   \n",
       "2                196033.92                142459.52           53574.41   \n",
       "3                     0.00                     0.00           14308.84   \n",
       "4                 37840.00                     0.00           90243.47   \n",
       "\n",
       "       TID  \n",
       "0  5800266  \n",
       "1   526223  \n",
       "2  2858622  \n",
       "3  4993209  \n",
       "4  1901957  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sender.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "79fc83b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:31.076825Z",
     "iopub.status.busy": "2024-07-13T15:28:31.076453Z",
     "iopub.status.idle": "2024-07-13T15:28:31.082973Z",
     "shell.execute_reply": "2024-07-13T15:28:31.081908Z"
    },
    "papermill": {
     "duration": 0.044145,
     "end_time": "2024-07-13T15:28:31.085011",
     "exception": false,
     "start_time": "2024-07-13T15:28:31.040866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1721024, 4)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sender.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9fc72ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:31.159116Z",
     "iopub.status.busy": "2024-07-13T15:28:31.158801Z",
     "iopub.status.idle": "2024-07-13T15:28:31.169732Z",
     "shell.execute_reply": "2024-07-13T15:28:31.168595Z"
    },
    "papermill": {
     "duration": 0.051662,
     "end_time": "2024-07-13T15:28:31.171753",
     "exception": false,
     "start_time": "2024-07-13T15:28:31.120091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TID</th>\n",
       "      <th>isSuspectedHacker</th>\n",
       "      <th>isHacker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1400834</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1400835</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1400836</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1400837</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1400839</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       TID  isSuspectedHacker  isHacker\n",
       "0  1400834                  0         0\n",
       "1  1400835                  0         0\n",
       "2  1400836                  0         0\n",
       "3  1400837                  0         0\n",
       "4  1400839                  0         0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Processed_Hacker_Check.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2e300321",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:31.244860Z",
     "iopub.status.busy": "2024-07-13T15:28:31.244504Z",
     "iopub.status.idle": "2024-07-13T15:28:31.251154Z",
     "shell.execute_reply": "2024-07-13T15:28:31.250172Z"
    },
    "papermill": {
     "duration": 0.044204,
     "end_time": "2024-07-13T15:28:31.252957",
     "exception": false,
     "start_time": "2024-07-13T15:28:31.208753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(629144, 3)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Processed_Hacker_Check.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1db229a3",
   "metadata": {
    "papermill": {
     "duration": 0.035135,
     "end_time": "2024-07-13T15:28:31.323424",
     "exception": false,
     "start_time": "2024-07-13T15:28:31.288289",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Let start Merging all the data into one and **explore other relationships**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78aeacb4",
   "metadata": {
    "papermill": {
     "duration": 0.033953,
     "end_time": "2024-07-13T15:28:31.392632",
     "exception": false,
     "start_time": "2024-07-13T15:28:31.358679",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Here, we're getting a list of unique Transaction IDs (TID) from the Transactions table, and also unique identifiers from the Sender and Receiver tables. This helps us gather all the different transactions and people involved in the system, making it easier to keep track of who's doing what.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bff3bcc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:31.465366Z",
     "iopub.status.busy": "2024-07-13T15:28:31.464561Z",
     "iopub.status.idle": "2024-07-13T15:28:32.431711Z",
     "shell.execute_reply": "2024-07-13T15:28:32.430736Z"
    },
    "papermill": {
     "duration": 1.005338,
     "end_time": "2024-07-13T15:28:32.433453",
     "exception": false,
     "start_time": "2024-07-13T15:28:31.428115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Transactions_ID=set(Transactions['TID'])\n",
    "Sender_ID=set(Sender['TID'])\n",
    "Receiver_ID=set(Receiver['TID'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa0f5882",
   "metadata": {
    "papermill": {
     "duration": 0.034619,
     "end_time": "2024-07-13T15:28:32.503048",
     "exception": false,
     "start_time": "2024-07-13T15:28:32.468429",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Here, we're combining all Transaction IDs (TIDs) to create a comprehensive dataset. This allows us to conduct Exploratory Data Analysis (EDA) and extract valuable insights from the data. By doing this, we can enhance our feature engineering process, making it more efficient and effective.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f7f7997a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:32.573530Z",
     "iopub.status.busy": "2024-07-13T15:28:32.572574Z",
     "iopub.status.idle": "2024-07-13T15:28:33.136745Z",
     "shell.execute_reply": "2024-07-13T15:28:33.135737Z"
    },
    "papermill": {
     "duration": 0.600907,
     "end_time": "2024-07-13T15:28:33.138567",
     "exception": false,
     "start_time": "2024-07-13T15:28:32.537660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "All_Given_IDs=Transactions_ID.union(Sender_ID).union(Receiver_ID)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61496096",
   "metadata": {
    "papermill": {
     "duration": 0.033201,
     "end_time": "2024-07-13T15:28:33.207706",
     "exception": false,
     "start_time": "2024-07-13T15:28:33.174505",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Here, we're making a new column that includes all Transaction IDs (TIDs) found in the Transaction, Sender, and Receiver tables.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dc519e3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:33.277071Z",
     "iopub.status.busy": "2024-07-13T15:28:33.276752Z",
     "iopub.status.idle": "2024-07-13T15:28:34.009129Z",
     "shell.execute_reply": "2024-07-13T15:28:34.008177Z"
    },
    "papermill": {
     "duration": 0.76983,
     "end_time": "2024-07-13T15:28:34.011259",
     "exception": false,
     "start_time": "2024-07-13T15:28:33.241429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.DataFrame(All_Given_IDs, columns=['All_IDs'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "084c28f8",
   "metadata": {
    "papermill": {
     "duration": 0.034491,
     "end_time": "2024-07-13T15:28:34.082936",
     "exception": false,
     "start_time": "2024-07-13T15:28:34.048445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Here, we're building a comprehensive dataframe containing all Transaction IDs (TIDs), and then connecting it with the transactions data using a left join.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d2777381",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:34.154491Z",
     "iopub.status.busy": "2024-07-13T15:28:34.154135Z",
     "iopub.status.idle": "2024-07-13T15:28:35.479072Z",
     "shell.execute_reply": "2024-07-13T15:28:35.478069Z"
    },
    "papermill": {
     "duration": 1.362674,
     "end_time": "2024-07-13T15:28:35.480839",
     "exception": false,
     "start_time": "2024-07-13T15:28:34.118165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>TID</th>\n",
       "      <th>IdOfOrigStudent</th>\n",
       "      <th>IdOfDestStudent</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>C1570470538</td>\n",
       "      <td>C824009085</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>Purchased groceries</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>71</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>72</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>93</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>108</td>\n",
       "      <td>108.0</td>\n",
       "      <td>C1740826931</td>\n",
       "      <td>C97730845</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>laundry rent</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   All_IDs    TID IdOfOrigStudent IdOfDestStudent transactionType  hourStep  \\\n",
       "0       47   47.0     C1570470538      C824009085    cash outflow       1.0   \n",
       "1       71    NaN             NaN             NaN             NaN       NaN   \n",
       "2       72    NaN             NaN             NaN             NaN       NaN   \n",
       "3       93    NaN             NaN             NaN             NaN       NaN   \n",
       "4      108  108.0     C1740826931       C97730845    cash outflow       1.0   \n",
       "\n",
       "  transaction_device             comments  \n",
       "0        Net Banking  Purchased groceries  \n",
       "1                NaN                  NaN  \n",
       "2                NaN                  NaN  \n",
       "3                NaN                  NaN  \n",
       "4        Net Banking         laundry rent  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_df=df.merge(Transactions,left_on=\"All_IDs\",right_on=\"TID\",how=\"left\")\n",
    "master_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0aa9fb5",
   "metadata": {
    "papermill": {
     "duration": 0.033965,
     "end_time": "2024-07-13T15:28:35.549048",
     "exception": false,
     "start_time": "2024-07-13T15:28:35.515083",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Now, we're putting together all the tables with our main dataframe, so that we have everything combined into one single table.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f461b4f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:35.618183Z",
     "iopub.status.busy": "2024-07-13T15:28:35.617848Z",
     "iopub.status.idle": "2024-07-13T15:28:42.904509Z",
     "shell.execute_reply": "2024-07-13T15:28:42.903540Z"
    },
    "papermill": {
     "duration": 7.323807,
     "end_time": "2024-07-13T15:28:42.906696",
     "exception": false,
     "start_time": "2024-07-13T15:28:35.582889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "master_df=master_df.merge(Sender.add_suffix('_send'),left_on=\"All_IDs\",right_on=\"TID_send\",how=\"left\")\n",
    "master_df=master_df.merge(Receiver.add_suffix('_recieve'),left_on=\"All_IDs\",right_on=\"TID_recieve\",how=\"left\")\n",
    "master_df=master_df.merge(Students.add_suffix('_orig'),left_on=\"IdOfOrigStudent\",right_on=\"StudentId_orig\",how=\"left\")\n",
    "master_df=master_df.merge(Students.add_suffix('_dest'),left_on=\"IdOfDestStudent\",right_on=\"StudentId_dest\",how=\"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "88ed723c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:42.978205Z",
     "iopub.status.busy": "2024-07-13T15:28:42.977845Z",
     "iopub.status.idle": "2024-07-13T15:28:43.004758Z",
     "shell.execute_reply": "2024-07-13T15:28:43.003775Z"
    },
    "papermill": {
     "duration": 0.065249,
     "end_time": "2024-07-13T15:28:43.007092",
     "exception": false,
     "start_time": "2024-07-13T15:28:42.941843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>TID</th>\n",
       "      <th>IdOfOrigStudent</th>\n",
       "      <th>IdOfDestStudent</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionFrequency_orig</th>\n",
       "      <th>NumberOfTransactionsTillDate_orig</th>\n",
       "      <th>AccountType_orig</th>\n",
       "      <th>StudentId_dest</th>\n",
       "      <th>StudentName_dest</th>\n",
       "      <th>StudentAge_dest</th>\n",
       "      <th>StudentYear_dest</th>\n",
       "      <th>TransactionFrequency_dest</th>\n",
       "      <th>NumberOfTransactionsTillDate_dest</th>\n",
       "      <th>AccountType_dest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>C1570470538</td>\n",
       "      <td>C824009085</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>Purchased groceries</td>\n",
       "      <td>1942.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>587.0</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>71</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162075.98</td>\n",
       "      <td>25203.05</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>72</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25203.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>93</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>108</td>\n",
       "      <td>108.0</td>\n",
       "      <td>C1740826931</td>\n",
       "      <td>C97730845</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>laundry rent</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>LOW</td>\n",
       "      <td>333.0</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "      <td>C97730845</td>\n",
       "      <td>Student 1281475</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>HIGH</td>\n",
       "      <td>971.0</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   All_IDs    TID IdOfOrigStudent IdOfDestStudent transactionType  hourStep  \\\n",
       "0       47   47.0     C1570470538      C824009085    cash outflow       1.0   \n",
       "1       71    NaN             NaN             NaN             NaN       NaN   \n",
       "2       72    NaN             NaN             NaN             NaN       NaN   \n",
       "3       93    NaN             NaN             NaN             NaN       NaN   \n",
       "4      108  108.0     C1740826931       C97730845    cash outflow       1.0   \n",
       "\n",
       "  transaction_device             comments  oldBalanceOfOrigStudent_send  \\\n",
       "0        Net Banking  Purchased groceries                       1942.02   \n",
       "1                NaN                  NaN                     162075.98   \n",
       "2                NaN                  NaN                      25203.05   \n",
       "3                NaN                  NaN                          0.00   \n",
       "4        Net Banking         laundry rent                          0.00   \n",
       "\n",
       "   newBalanceOfOrigStudent_send  ...  TransactionFrequency_orig  \\\n",
       "0                          0.00  ...                       HIGH   \n",
       "1                      25203.05  ...                        NaN   \n",
       "2                          0.00  ...                        NaN   \n",
       "3                          0.00  ...                        NaN   \n",
       "4                          0.00  ...                        LOW   \n",
       "\n",
       "   NumberOfTransactionsTillDate_orig  AccountType_orig  StudentId_dest  \\\n",
       "0                              587.0      JOINT/SHARED             NaN   \n",
       "1                                NaN               NaN             NaN   \n",
       "2                                NaN               NaN             NaN   \n",
       "3                                NaN               NaN             NaN   \n",
       "4                              333.0      JOINT/SHARED       C97730845   \n",
       "\n",
       "   StudentName_dest  StudentAge_dest StudentYear_dest  \\\n",
       "0               NaN              NaN              NaN   \n",
       "1               NaN              NaN              NaN   \n",
       "2               NaN              NaN              NaN   \n",
       "3               NaN              NaN              NaN   \n",
       "4   Student 1281475             14.0              2.0   \n",
       "\n",
       "  TransactionFrequency_dest  NumberOfTransactionsTillDate_dest  \\\n",
       "0                       NaN                                NaN   \n",
       "1                       NaN                                NaN   \n",
       "2                       NaN                                NaN   \n",
       "3                       NaN                                NaN   \n",
       "4                      HIGH                              971.0   \n",
       "\n",
       "   AccountType_dest  \n",
       "0               NaN  \n",
       "1               NaN  \n",
       "2               NaN  \n",
       "3               NaN  \n",
       "4      JOINT/SHARED  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "54eff17d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:43.080045Z",
     "iopub.status.busy": "2024-07-13T15:28:43.079581Z",
     "iopub.status.idle": "2024-07-13T15:28:44.025689Z",
     "shell.execute_reply": "2024-07-13T15:28:44.024773Z"
    },
    "papermill": {
     "duration": 0.985031,
     "end_time": "2024-07-13T15:28:44.027822",
     "exception": false,
     "start_time": "2024-07-13T15:28:43.042791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Processed_df=master_df.merge(Processed_Hacker_Check,left_on=\"All_IDs\",right_on=\"TID\",how=\"inner\")\n",
    "Unprocessed_df=master_df.merge(Unprocessed_Hacker_Check,left_on=\"All_IDs\",right_on=\"TID\",how=\"inner\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1492b8cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:44.099195Z",
     "iopub.status.busy": "2024-07-13T15:28:44.098852Z",
     "iopub.status.idle": "2024-07-13T15:28:44.536296Z",
     "shell.execute_reply": "2024-07-13T15:28:44.535380Z"
    },
    "papermill": {
     "duration": 0.475589,
     "end_time": "2024-07-13T15:28:44.538500",
     "exception": false,
     "start_time": "2024-07-13T15:28:44.062911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "processed_master_df = pd.concat([Processed_df, Unprocessed_df], ignore_index=True)\n",
    "processed_master_df.drop(['TID_x','TID_y',\"TID_send\",\"TID_recieve\"],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edc282d6",
   "metadata": {
    "papermill": {
     "duration": 0.035286,
     "end_time": "2024-07-13T15:28:44.609254",
     "exception": false,
     "start_time": "2024-07-13T15:28:44.573968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Exciting news! We've successfully computed our master dataframe, which now includes data from all relevant tables.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "371939a8",
   "metadata": {
    "papermill": {
     "duration": 0.034921,
     "end_time": "2024-07-13T15:28:44.679191",
     "exception": false,
     "start_time": "2024-07-13T15:28:44.644270",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# *Quality Check Alert !!*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cec4dbe",
   "metadata": {
    "papermill": {
     "duration": 0.03514,
     "end_time": "2024-07-13T15:28:44.749720",
     "exception": false,
     "start_time": "2024-07-13T15:28:44.714580",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**We're performing a quality check to verify the number of rows in three dataframes: Processed_df, Unprocessed_df, and processed_master_df.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "21a3487a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:44.823529Z",
     "iopub.status.busy": "2024-07-13T15:28:44.823174Z",
     "iopub.status.idle": "2024-07-13T15:28:44.828180Z",
     "shell.execute_reply": "2024-07-13T15:28:44.827130Z"
    },
    "papermill": {
     "duration": 0.043744,
     "end_time": "2024-07-13T15:28:44.830058",
     "exception": false,
     "start_time": "2024-07-13T15:28:44.786314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(629144, 33)\n",
      "(419431, 32)\n",
      "(1048575, 29)\n"
     ]
    }
   ],
   "source": [
    "print(Processed_df.shape)\n",
    "print(Unprocessed_df.shape)\n",
    "print(processed_master_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "300003f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:44.902860Z",
     "iopub.status.busy": "2024-07-13T15:28:44.902459Z",
     "iopub.status.idle": "2024-07-13T15:28:44.916898Z",
     "shell.execute_reply": "2024-07-13T15:28:44.915897Z"
    },
    "papermill": {
     "duration": 0.053249,
     "end_time": "2024-07-13T15:28:44.918743",
     "exception": false,
     "start_time": "2024-07-13T15:28:44.865494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "isHacker\n",
       "0.0    625590\n",
       "1.0      3554\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_master_df.isHacker.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cbc1191",
   "metadata": {
    "papermill": {
     "duration": 0.035393,
     "end_time": "2024-07-13T15:28:44.989721",
     "exception": false,
     "start_time": "2024-07-13T15:28:44.954328",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**We found that in our processed_master_df we have 3554 hackers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a2e1abd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:45.064790Z",
     "iopub.status.busy": "2024-07-13T15:28:45.063827Z",
     "iopub.status.idle": "2024-07-13T15:28:45.085242Z",
     "shell.execute_reply": "2024-07-13T15:28:45.084498Z"
    },
    "papermill": {
     "duration": 0.060216,
     "end_time": "2024-07-13T15:28:45.086892",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.026676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>IdOfOrigStudent</th>\n",
       "      <th>IdOfDestStudent</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>...</th>\n",
       "      <th>AccountType_orig</th>\n",
       "      <th>StudentId_dest</th>\n",
       "      <th>StudentName_dest</th>\n",
       "      <th>StudentAge_dest</th>\n",
       "      <th>StudentYear_dest</th>\n",
       "      <th>TransactionFrequency_dest</th>\n",
       "      <th>NumberOfTransactionsTillDate_dest</th>\n",
       "      <th>AccountType_dest</th>\n",
       "      <th>isSuspectedHacker</th>\n",
       "      <th>isHacker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1400834</td>\n",
       "      <td>C606683033</td>\n",
       "      <td>M1233701161</td>\n",
       "      <td>money payment</td>\n",
       "      <td>359.0</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>dinner</td>\n",
       "      <td>6063.0</td>\n",
       "      <td>1225.24</td>\n",
       "      <td>4837.76</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>M1233701161</td>\n",
       "      <td>Student 1654691</td>\n",
       "      <td>28.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>MEDIUM</td>\n",
       "      <td>137.0</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1400835</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>148046.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>242478.03</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1400836</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>72900.06</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1400837</td>\n",
       "      <td>C677492872</td>\n",
       "      <td>M58665846</td>\n",
       "      <td>money payment</td>\n",
       "      <td>165.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>food</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4826.80</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>M58665846</td>\n",
       "      <td>Student 959699</td>\n",
       "      <td>19.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>LOW</td>\n",
       "      <td>407.0</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1400839</td>\n",
       "      <td>C490955644</td>\n",
       "      <td>C1924301001</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>250.0</td>\n",
       "      <td>Check</td>\n",
       "      <td>laundry rent</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>359404.15</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   All_IDs IdOfOrigStudent IdOfDestStudent transactionType  hourStep  \\\n",
       "0  1400834      C606683033     M1233701161   money payment     359.0   \n",
       "1  1400835             NaN             NaN             NaN       NaN   \n",
       "2  1400836             NaN             NaN             NaN       NaN   \n",
       "3  1400837      C677492872       M58665846   money payment     165.0   \n",
       "4  1400839      C490955644     C1924301001    cash outflow     250.0   \n",
       "\n",
       "  transaction_device      comments  oldBalanceOfOrigStudent_send  \\\n",
       "0        Net Banking        dinner                        6063.0   \n",
       "1                NaN           NaN                      148046.0   \n",
       "2                NaN           NaN                           0.0   \n",
       "3           ATM card          food                           0.0   \n",
       "4              Check  laundry rent                           0.0   \n",
       "\n",
       "   newBalanceOfOrigStudent_send  transactionAmount_send  ...  \\\n",
       "0                       1225.24                 4837.76  ...   \n",
       "1                          0.00               242478.03  ...   \n",
       "2                          0.00                72900.06  ...   \n",
       "3                          0.00                 4826.80  ...   \n",
       "4                          0.00               359404.15  ...   \n",
       "\n",
       "   AccountType_orig  StudentId_dest  StudentName_dest StudentAge_dest  \\\n",
       "0        INDIVIDUAL     M1233701161   Student 1654691            28.0   \n",
       "1               NaN             NaN               NaN             NaN   \n",
       "2               NaN             NaN               NaN             NaN   \n",
       "3        INDIVIDUAL       M58665846    Student 959699            19.0   \n",
       "4        INDIVIDUAL             NaN               NaN             NaN   \n",
       "\n",
       "  StudentYear_dest  TransactionFrequency_dest  \\\n",
       "0              4.0                     MEDIUM   \n",
       "1              NaN                        NaN   \n",
       "2              NaN                        NaN   \n",
       "3              4.0                        LOW   \n",
       "4              NaN                        NaN   \n",
       "\n",
       "   NumberOfTransactionsTillDate_dest AccountType_dest  isSuspectedHacker  \\\n",
       "0                              137.0     JOINT/SHARED                  0   \n",
       "1                                NaN              NaN                  0   \n",
       "2                                NaN              NaN                  0   \n",
       "3                              407.0       INDIVIDUAL                  0   \n",
       "4                                NaN              NaN                  0   \n",
       "\n",
       "  isHacker  \n",
       "0      0.0  \n",
       "1      0.0  \n",
       "2      0.0  \n",
       "3      0.0  \n",
       "4      0.0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_master_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba184d84",
   "metadata": {
    "papermill": {
     "duration": 0.035754,
     "end_time": "2024-07-13T15:28:45.158727",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.122973",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Preparing Fraud Master DataFrame for Insight Analysis:**\n",
    "\n",
    "* Creating a fraud master dataframe to analyze fraudulent transactions.\n",
    "* Aim to understand the types of transactions targeted by hackers.\n",
    "* This analysis will facilitate more efficient and effective feature engineering.\n",
    "* Identifying patterns and characteristics associated with fraudulent activities.\n",
    "* Insights gained will help enhance fraud detection and prevention strategies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "43fb4dfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:45.232429Z",
     "iopub.status.busy": "2024-07-13T15:28:45.232094Z",
     "iopub.status.idle": "2024-07-13T15:28:45.246223Z",
     "shell.execute_reply": "2024-07-13T15:28:45.245230Z"
    },
    "papermill": {
     "duration": 0.052998,
     "end_time": "2024-07-13T15:28:45.248320",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.195322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "fraud_master_df = processed_master_df[processed_master_df['isHacker']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2e7d6b4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:45.321636Z",
     "iopub.status.busy": "2024-07-13T15:28:45.321260Z",
     "iopub.status.idle": "2024-07-13T15:28:45.345607Z",
     "shell.execute_reply": "2024-07-13T15:28:45.344433Z"
    },
    "papermill": {
     "duration": 0.063884,
     "end_time": "2024-07-13T15:28:45.348317",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.284433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>IdOfOrigStudent</th>\n",
       "      <th>IdOfDestStudent</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>...</th>\n",
       "      <th>AccountType_orig</th>\n",
       "      <th>StudentId_dest</th>\n",
       "      <th>StudentName_dest</th>\n",
       "      <th>StudentAge_dest</th>\n",
       "      <th>StudentYear_dest</th>\n",
       "      <th>TransactionFrequency_dest</th>\n",
       "      <th>NumberOfTransactionsTillDate_dest</th>\n",
       "      <th>AccountType_dest</th>\n",
       "      <th>isSuspectedHacker</th>\n",
       "      <th>isHacker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>1400900</td>\n",
       "      <td>C13476489</td>\n",
       "      <td>C267641579</td>\n",
       "      <td>money transfer</td>\n",
       "      <td>138.0</td>\n",
       "      <td>Check</td>\n",
       "      <td>drinks</td>\n",
       "      <td>303432.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>303432.45</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>1400966</td>\n",
       "      <td>C1946400298</td>\n",
       "      <td>C1340648788</td>\n",
       "      <td>money transfer</td>\n",
       "      <td>183.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>lunch</td>\n",
       "      <td>355909.21</td>\n",
       "      <td>0.0</td>\n",
       "      <td>355909.21</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>1401283</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20364.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20364.00</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>408</th>\n",
       "      <td>1401314</td>\n",
       "      <td>C1427622325</td>\n",
       "      <td>C1382020476</td>\n",
       "      <td>money transfer</td>\n",
       "      <td>427.0</td>\n",
       "      <td>UPI</td>\n",
       "      <td>purchased stationary</td>\n",
       "      <td>426173.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>426173.04</td>\n",
       "      <td>...</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "      <td>C1382020476</td>\n",
       "      <td>Student 1524593</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MEDIUM</td>\n",
       "      <td>590.0</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>469</th>\n",
       "      <td>1401377</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>966222.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>966222.50</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     All_IDs IdOfOrigStudent IdOfDestStudent transactionType  hourStep  \\\n",
       "60   1400900       C13476489      C267641579  money transfer     138.0   \n",
       "120  1400966     C1946400298     C1340648788  money transfer     183.0   \n",
       "381  1401283             NaN             NaN             NaN       NaN   \n",
       "408  1401314     C1427622325     C1382020476  money transfer     427.0   \n",
       "469  1401377             NaN             NaN             NaN       NaN   \n",
       "\n",
       "    transaction_device              comments  oldBalanceOfOrigStudent_send  \\\n",
       "60               Check                drinks                     303432.45   \n",
       "120           ATM card                 lunch                     355909.21   \n",
       "381                NaN                   NaN                      20364.00   \n",
       "408                UPI  purchased stationary                     426173.04   \n",
       "469                NaN                   NaN                     966222.50   \n",
       "\n",
       "     newBalanceOfOrigStudent_send  transactionAmount_send  ...  \\\n",
       "60                            0.0               303432.45  ...   \n",
       "120                           0.0               355909.21  ...   \n",
       "381                           0.0                20364.00  ...   \n",
       "408                           0.0               426173.04  ...   \n",
       "469                           0.0               966222.50  ...   \n",
       "\n",
       "     AccountType_orig  StudentId_dest  StudentName_dest StudentAge_dest  \\\n",
       "60         INDIVIDUAL             NaN               NaN             NaN   \n",
       "120        INDIVIDUAL             NaN               NaN             NaN   \n",
       "381               NaN             NaN               NaN             NaN   \n",
       "408      JOINT/SHARED     C1382020476   Student 1524593            26.0   \n",
       "469               NaN             NaN               NaN             NaN   \n",
       "\n",
       "    StudentYear_dest  TransactionFrequency_dest  \\\n",
       "60               NaN                        NaN   \n",
       "120              NaN                        NaN   \n",
       "381              NaN                        NaN   \n",
       "408              1.0                     MEDIUM   \n",
       "469              NaN                        NaN   \n",
       "\n",
       "     NumberOfTransactionsTillDate_dest AccountType_dest  isSuspectedHacker  \\\n",
       "60                                 NaN              NaN                  0   \n",
       "120                                NaN              NaN                  0   \n",
       "381                                NaN              NaN                  0   \n",
       "408                              590.0     JOINT/SHARED                  0   \n",
       "469                                NaN              NaN                  0   \n",
       "\n",
       "    isHacker  \n",
       "60       1.0  \n",
       "120      1.0  \n",
       "381      1.0  \n",
       "408      1.0  \n",
       "469      1.0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fraud_master_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d8ecd85",
   "metadata": {
    "papermill": {
     "duration": 0.035623,
     "end_time": "2024-07-13T15:28:45.419751",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.384128",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Conducting a quality check to ensure that we've accurately captured all instances of hacker activity.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f9b98f0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:45.494035Z",
     "iopub.status.busy": "2024-07-13T15:28:45.493332Z",
     "iopub.status.idle": "2024-07-13T15:28:45.499385Z",
     "shell.execute_reply": "2024-07-13T15:28:45.498519Z"
    },
    "papermill": {
     "duration": 0.045556,
     "end_time": "2024-07-13T15:28:45.501193",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.455637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3554, 29)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fraud_master_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d699e1b",
   "metadata": {
    "papermill": {
     "duration": 0.036589,
     "end_time": "2024-07-13T15:28:45.574700",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.538111",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Next, we'll thoroughly examine the fraud_master_df to uncover insights regarding patterns in fraudulent transactions.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b67adcc9",
   "metadata": {
    "papermill": {
     "duration": 0.036181,
     "end_time": "2024-07-13T15:28:45.647425",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.611244",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Here, we're exploring if we can glean any insights from the transaction types.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "236e1d95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:45.722051Z",
     "iopub.status.busy": "2024-07-13T15:28:45.721611Z",
     "iopub.status.idle": "2024-07-13T15:28:46.181236Z",
     "shell.execute_reply": "2024-07-13T15:28:46.180273Z"
    },
    "papermill": {
     "duration": 0.499159,
     "end_time": "2024-07-13T15:28:46.183048",
     "exception": false,
     "start_time": "2024-07-13T15:28:45.683889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped_df = fraud_master_df.groupby(['transactionType']).size()\n",
    "\n",
    "# Plotting the grouped bar plot\n",
    "grouped_df.plot(kind='bar', stacked=False, color='skyblue')\n",
    "\n",
    "# Adding labels, title, and legend\n",
    "plt.xlabel('Transaction Type')\n",
    "plt.ylabel('Count of Hackers')\n",
    "plt.title('Transaction Type Distribution')\n",
    "plt.legend(['Count of Hackers'], title='Legend')\n",
    "\n",
    "# Display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9efd731c",
   "metadata": {
    "papermill": {
     "duration": 0.036248,
     "end_time": "2024-07-13T15:28:46.256445",
     "exception": false,
     "start_time": "2024-07-13T15:28:46.220197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Insights from Transaction Type Analysis:**\n",
    "\n",
    "**Fraudulent transactions are exclusively found in the \"Cash Outflow\" and \"Money Transfer\" transaction types.**\n",
    "* This discovery sheds light on potential indicators for identifying fraudulent activities.\n",
    "* Focusing on these transaction types can aid in pinpointing and mitigating fraudulent behavior more effectively."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8baacd5d",
   "metadata": {
    "papermill": {
     "duration": 0.089496,
     "end_time": "2024-07-13T15:28:46.382616",
     "exception": false,
     "start_time": "2024-07-13T15:28:46.293120",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Now we're investigating the comments section to see if it holds any useful information or patterns that could provide insights.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1f60086a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:46.457815Z",
     "iopub.status.busy": "2024-07-13T15:28:46.457465Z",
     "iopub.status.idle": "2024-07-13T15:28:46.635400Z",
     "shell.execute_reply": "2024-07-13T15:28:46.634537Z"
    },
    "papermill": {
     "duration": 0.217611,
     "end_time": "2024-07-13T15:28:46.637412",
     "exception": false,
     "start_time": "2024-07-13T15:28:46.419801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped_df = fraud_master_df.groupby(['comments']).size()\n",
    "\n",
    "# Creating the pie chart\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.pie(grouped_df, labels=grouped_df.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.tab20.colors)\n",
    "plt.title('Comments Distribution')\n",
    "plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "# Display the pie chart\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "726cb56a",
   "metadata": {
    "papermill": {
     "duration": 0.038031,
     "end_time": "2024-07-13T15:28:46.722794",
     "exception": false,
     "start_time": "2024-07-13T15:28:46.684763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Insights from Comments Pie Chart:**\n",
    "\n",
    "* Uniform distribution is evident among comments.\n",
    "* Each comment category exhibits equal frequency."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5a0b03e",
   "metadata": {
    "papermill": {
     "duration": 0.036799,
     "end_time": "2024-07-13T15:28:46.796700",
     "exception": false,
     "start_time": "2024-07-13T15:28:46.759901",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Now, we're going to examine the transaction devices to see if we can discover any useful insights.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bf628f76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:46.872243Z",
     "iopub.status.busy": "2024-07-13T15:28:46.871893Z",
     "iopub.status.idle": "2024-07-13T15:28:47.103857Z",
     "shell.execute_reply": "2024-07-13T15:28:47.102987Z"
    },
    "papermill": {
     "duration": 0.272058,
     "end_time": "2024-07-13T15:28:47.105912",
     "exception": false,
     "start_time": "2024-07-13T15:28:46.833854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grouped_df = fraud_master_df.groupby(['transaction_device']).size()\n",
    "\n",
    "# Plotting the grouped bar plot\n",
    "grouped_df.plot(kind='bar', stacked=False, color=plt.cm.tab20.colors)\n",
    "\n",
    "# Adding labels, title, and legend\n",
    "plt.xlabel('Transaction Device')\n",
    "plt.ylabel('Count of Hackers')\n",
    "plt.title('Transaction Device Distribution')\n",
    "plt.legend(['Count of Hackers'], title='Legend')\n",
    "\n",
    "# Display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58a35991",
   "metadata": {
    "papermill": {
     "duration": 0.036745,
     "end_time": "2024-07-13T15:28:47.180115",
     "exception": false,
     "start_time": "2024-07-13T15:28:47.143370",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Unfortunately, we didn't uncover any insights as all devices showed an equal contribution to fraudulent transactions.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c54b4f09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:47.257542Z",
     "iopub.status.busy": "2024-07-13T15:28:47.257089Z",
     "iopub.status.idle": "2024-07-13T15:28:47.280717Z",
     "shell.execute_reply": "2024-07-13T15:28:47.279779Z"
    },
    "papermill": {
     "duration": 0.064485,
     "end_time": "2024-07-13T15:28:47.282814",
     "exception": false,
     "start_time": "2024-07-13T15:28:47.218329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>IdOfOrigStudent</th>\n",
       "      <th>IdOfDestStudent</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>...</th>\n",
       "      <th>AccountType_orig</th>\n",
       "      <th>StudentId_dest</th>\n",
       "      <th>StudentName_dest</th>\n",
       "      <th>StudentAge_dest</th>\n",
       "      <th>StudentYear_dest</th>\n",
       "      <th>TransactionFrequency_dest</th>\n",
       "      <th>NumberOfTransactionsTillDate_dest</th>\n",
       "      <th>AccountType_dest</th>\n",
       "      <th>isSuspectedHacker</th>\n",
       "      <th>isHacker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1400834</td>\n",
       "      <td>C606683033</td>\n",
       "      <td>M1233701161</td>\n",
       "      <td>money payment</td>\n",
       "      <td>359.0</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>dinner</td>\n",
       "      <td>6063.0</td>\n",
       "      <td>1225.24</td>\n",
       "      <td>4837.76</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>M1233701161</td>\n",
       "      <td>Student 1654691</td>\n",
       "      <td>28.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>MEDIUM</td>\n",
       "      <td>137.0</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1400835</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>148046.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>242478.03</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1400836</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>72900.06</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1400837</td>\n",
       "      <td>C677492872</td>\n",
       "      <td>M58665846</td>\n",
       "      <td>money payment</td>\n",
       "      <td>165.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>food</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4826.80</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>M58665846</td>\n",
       "      <td>Student 959699</td>\n",
       "      <td>19.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>LOW</td>\n",
       "      <td>407.0</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1400839</td>\n",
       "      <td>C490955644</td>\n",
       "      <td>C1924301001</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>250.0</td>\n",
       "      <td>Check</td>\n",
       "      <td>laundry rent</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>359404.15</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   All_IDs IdOfOrigStudent IdOfDestStudent transactionType  hourStep  \\\n",
       "0  1400834      C606683033     M1233701161   money payment     359.0   \n",
       "1  1400835             NaN             NaN             NaN       NaN   \n",
       "2  1400836             NaN             NaN             NaN       NaN   \n",
       "3  1400837      C677492872       M58665846   money payment     165.0   \n",
       "4  1400839      C490955644     C1924301001    cash outflow     250.0   \n",
       "\n",
       "  transaction_device      comments  oldBalanceOfOrigStudent_send  \\\n",
       "0        Net Banking        dinner                        6063.0   \n",
       "1                NaN           NaN                      148046.0   \n",
       "2                NaN           NaN                           0.0   \n",
       "3           ATM card          food                           0.0   \n",
       "4              Check  laundry rent                           0.0   \n",
       "\n",
       "   newBalanceOfOrigStudent_send  transactionAmount_send  ...  \\\n",
       "0                       1225.24                 4837.76  ...   \n",
       "1                          0.00               242478.03  ...   \n",
       "2                          0.00                72900.06  ...   \n",
       "3                          0.00                 4826.80  ...   \n",
       "4                          0.00               359404.15  ...   \n",
       "\n",
       "   AccountType_orig  StudentId_dest  StudentName_dest StudentAge_dest  \\\n",
       "0        INDIVIDUAL     M1233701161   Student 1654691            28.0   \n",
       "1               NaN             NaN               NaN             NaN   \n",
       "2               NaN             NaN               NaN             NaN   \n",
       "3        INDIVIDUAL       M58665846    Student 959699            19.0   \n",
       "4        INDIVIDUAL             NaN               NaN             NaN   \n",
       "\n",
       "  StudentYear_dest  TransactionFrequency_dest  \\\n",
       "0              4.0                     MEDIUM   \n",
       "1              NaN                        NaN   \n",
       "2              NaN                        NaN   \n",
       "3              4.0                        LOW   \n",
       "4              NaN                        NaN   \n",
       "\n",
       "   NumberOfTransactionsTillDate_dest AccountType_dest  isSuspectedHacker  \\\n",
       "0                              137.0     JOINT/SHARED                  0   \n",
       "1                                NaN              NaN                  0   \n",
       "2                                NaN              NaN                  0   \n",
       "3                              407.0       INDIVIDUAL                  0   \n",
       "4                                NaN              NaN                  0   \n",
       "\n",
       "  isHacker  \n",
       "0      0.0  \n",
       "1      0.0  \n",
       "2      0.0  \n",
       "3      0.0  \n",
       "4      0.0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_master_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e0428ff",
   "metadata": {
    "papermill": {
     "duration": 0.037105,
     "end_time": "2024-07-13T15:28:47.356967",
     "exception": false,
     "start_time": "2024-07-13T15:28:47.319862",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Next, we'll explore the relationship between the IdOfOrigStudent and IdOfDestStudent to see if we can uncover any insights about fraudulent transactions or hacker activity.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2957f6f3",
   "metadata": {
    "papermill": {
     "duration": 0.036794,
     "end_time": "2024-07-13T15:28:47.430486",
     "exception": false,
     "start_time": "2024-07-13T15:28:47.393692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**1.) \"We observe that prefix to origin and destination student id contains some alphabets\" lets explore more**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b9f0e154",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:47.507250Z",
     "iopub.status.busy": "2024-07-13T15:28:47.506942Z",
     "iopub.status.idle": "2024-07-13T15:28:48.435492Z",
     "shell.execute_reply": "2024-07-13T15:28:48.434297Z"
    },
    "papermill": {
     "duration": 0.969722,
     "end_time": "2024-07-13T15:28:48.437705",
     "exception": false,
     "start_time": "2024-07-13T15:28:47.467983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sample_df = processed_master_df[['IdOfOrigStudent' , 'IdOfDestStudent' , 'isHacker']]\n",
    "sample_df['origin_alphabet'] = sample_df['IdOfOrigStudent'].str[0]\n",
    "sample_df['dest_alphabet'] = sample_df['IdOfDestStudent'].str[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b7be7464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:48.514682Z",
     "iopub.status.busy": "2024-07-13T15:28:48.514359Z",
     "iopub.status.idle": "2024-07-13T15:28:48.668296Z",
     "shell.execute_reply": "2024-07-13T15:28:48.667340Z"
    },
    "papermill": {
     "duration": 0.196032,
     "end_time": "2024-07-13T15:28:48.670680",
     "exception": false,
     "start_time": "2024-07-13T15:28:48.474648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>origin_alphabet</th>\n",
       "      <th>dest_alphabet</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">C</th>\n",
       "      <th>C</th>\n",
       "      <td>2107.0</td>\n",
       "      <td>241826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>0.0</td>\n",
       "      <td>141185</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  sum   count\n",
       "origin_alphabet dest_alphabet                \n",
       "C               C              2107.0  241826\n",
       "                M                 0.0  141185"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_df.groupby(['origin_alphabet' , 'dest_alphabet'])['isHacker'].agg({'count','sum'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "796a0a10",
   "metadata": {
    "papermill": {
     "duration": 0.038651,
     "end_time": "2024-07-13T15:28:48.748049",
     "exception": false,
     "start_time": "2024-07-13T15:28:48.709398",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Indeed, we notice that there are only two types of transactions: C -> C (Children to Children) and C -> M (Children to Merchant). Interestingly, fraudulent transactions are exclusively of the C -> C type, indicating that Children-to-Children transactions are more susceptible to fraudulent activity.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16a38f77",
   "metadata": {
    "papermill": {
     "duration": 0.038259,
     "end_time": "2024-07-13T15:28:48.824833",
     "exception": false,
     "start_time": "2024-07-13T15:28:48.786574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's plot and examine the data to gain a clearer understanding.\n",
    "\n",
    "We'll plot the data to get a clearer view.\n",
    "\n",
    "Sure, let's visualize the data to gain a clearer understanding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6b2c7108",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:48.903694Z",
     "iopub.status.busy": "2024-07-13T15:28:48.903337Z",
     "iopub.status.idle": "2024-07-13T15:28:49.250780Z",
     "shell.execute_reply": "2024-07-13T15:28:49.249508Z"
    },
    "papermill": {
     "duration": 0.389093,
     "end_time": "2024-07-13T15:28:49.252591",
     "exception": false,
     "start_time": "2024-07-13T15:28:48.863498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "grouped_data = sample_df.groupby(['origin_alphabet', 'dest_alphabet'])['isHacker'].agg(['count', 'sum']).reset_index()\n",
    "\n",
    "# # Plot the bar plot\n",
    "plt.figure(figsize=(6, 4))\n",
    "plt.bar(range(len(grouped_data)), grouped_data['count'], color='skyblue', label='Count of isHacker')\n",
    "plt.bar(range(len(grouped_data)), grouped_data['sum'], color='orange', label='Sum of isHacker')\n",
    "plt.xlabel('Combination Index')\n",
    "plt.ylabel('Count/Sum')\n",
    "plt.title('Count and Sum of isHacker by Origin and Destination Alphabet')\n",
    "plt.xticks(range(len(grouped_data)), grouped_data['origin_alphabet'] + ' - ' + grouped_data['dest_alphabet'], rotation=90)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e953a434",
   "metadata": {
    "papermill": {
     "duration": 0.038311,
     "end_time": "2024-07-13T15:28:49.329088",
     "exception": false,
     "start_time": "2024-07-13T15:28:49.290777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**It is Evident that Children-Children contains all the fraud transactions where as Children-Merchant contains non-fraud transaction**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "13cb55d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:49.408531Z",
     "iopub.status.busy": "2024-07-13T15:28:49.408189Z",
     "iopub.status.idle": "2024-07-13T15:28:49.734404Z",
     "shell.execute_reply": "2024-07-13T15:28:49.733529Z"
    },
    "papermill": {
     "duration": 0.368101,
     "end_time": "2024-07-13T15:28:49.736140",
     "exception": false,
     "start_time": "2024-07-13T15:28:49.368039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "grouped_data = sample_df.groupby(['origin_alphabet', 'dest_alphabet'])['isHacker'].sum().reset_index()\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "plt.bar(range(len(grouped_data)), grouped_data['isHacker'], color='red')\n",
    "plt.xlabel('Combination Index')\n",
    "plt.ylabel('Count of Hacker Occurrences')\n",
    "plt.title('Count of Hacker Occurrences by Origin and Destination Alphabet')\n",
    "plt.xticks(range(len(grouped_data)), grouped_data['origin_alphabet'] + ' - ' + grouped_data['dest_alphabet'], rotation=90)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d87015e0",
   "metadata": {
    "papermill": {
     "duration": 0.037323,
     "end_time": "2024-07-13T15:28:49.811856",
     "exception": false,
     "start_time": "2024-07-13T15:28:49.774533",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4a43e3e1",
   "metadata": {
    "papermill": {
     "duration": 0.037031,
     "end_time": "2024-07-13T15:28:49.887022",
     "exception": false,
     "start_time": "2024-07-13T15:28:49.849991",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**2.) Let's investigate whether there's any relationship between transactions involving the IdOfOrigStudent and IdOfDestStudent. If we identify a relationship, we can consider creating a graph or network to visualize the connections between fraudulent transactions or potentially form communities within the data.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "08467966",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:49.966893Z",
     "iopub.status.busy": "2024-07-13T15:28:49.966574Z",
     "iopub.status.idle": "2024-07-13T15:28:50.469086Z",
     "shell.execute_reply": "2024-07-13T15:28:50.468158Z"
    },
    "papermill": {
     "duration": 0.545687,
     "end_time": "2024-07-13T15:28:50.471226",
     "exception": false,
     "start_time": "2024-07-13T15:28:49.925539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Orig_ID = set(processed_master_df['IdOfOrigStudent'])\n",
    "Dest_ID = set(processed_master_df['IdOfDestStudent'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "25980707",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:50.550781Z",
     "iopub.status.busy": "2024-07-13T15:28:50.550379Z",
     "iopub.status.idle": "2024-07-13T15:28:51.346125Z",
     "shell.execute_reply": "2024-07-13T15:28:51.345278Z"
    },
    "papermill": {
     "duration": 0.837372,
     "end_time": "2024-07-13T15:28:51.347922",
     "exception": false,
     "start_time": "2024-07-13T15:28:50.510550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib_venn import venn2\n",
    "\n",
    "# Calculate the number of unique elements in each set\n",
    "orig_id = set(processed_master_df['IdOfOrigStudent'])\n",
    "dest_id = set(processed_master_df['IdOfDestStudent'])\n",
    "\n",
    "# Create the Venn diagram\n",
    "venn2([orig_id, dest_id], ('IdOfOrigStudent', 'IdOfDestStudent'))\n",
    "\n",
    "# Add title\n",
    "plt.title('Venn Diagram of IdOfOrigStudent and IdOfDestStudent')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b6d2655",
   "metadata": {
    "papermill": {
     "duration": 0.040176,
     "end_time": "2024-07-13T15:28:51.427443",
     "exception": false,
     "start_time": "2024-07-13T15:28:51.387267",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Unfortunately, our analysis did not reveal any significant relationships or community structures between transactions involving the IdOfOrigStudent and IdOfDestStudent. Thus, this exploration did not yield any fruitful insights for our analysis.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "368e94cb",
   "metadata": {
    "papermill": {
     "duration": 0.039605,
     "end_time": "2024-07-13T15:28:51.506626",
     "exception": false,
     "start_time": "2024-07-13T15:28:51.467021",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering <a id=\"feature-engineering\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7d43d37d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:51.586504Z",
     "iopub.status.busy": "2024-07-13T15:28:51.586110Z",
     "iopub.status.idle": "2024-07-13T15:28:51.608895Z",
     "shell.execute_reply": "2024-07-13T15:28:51.608077Z"
    },
    "papermill": {
     "duration": 0.064655,
     "end_time": "2024-07-13T15:28:51.610546",
     "exception": false,
     "start_time": "2024-07-13T15:28:51.545891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>IdOfOrigStudent</th>\n",
       "      <th>IdOfDestStudent</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>...</th>\n",
       "      <th>AccountType_orig</th>\n",
       "      <th>StudentId_dest</th>\n",
       "      <th>StudentName_dest</th>\n",
       "      <th>StudentAge_dest</th>\n",
       "      <th>StudentYear_dest</th>\n",
       "      <th>TransactionFrequency_dest</th>\n",
       "      <th>NumberOfTransactionsTillDate_dest</th>\n",
       "      <th>AccountType_dest</th>\n",
       "      <th>isSuspectedHacker</th>\n",
       "      <th>isHacker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1400834</td>\n",
       "      <td>C606683033</td>\n",
       "      <td>M1233701161</td>\n",
       "      <td>money payment</td>\n",
       "      <td>359.0</td>\n",
       "      <td>Net Banking</td>\n",
       "      <td>dinner</td>\n",
       "      <td>6063.0</td>\n",
       "      <td>1225.24</td>\n",
       "      <td>4837.76</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>M1233701161</td>\n",
       "      <td>Student 1654691</td>\n",
       "      <td>28.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>MEDIUM</td>\n",
       "      <td>137.0</td>\n",
       "      <td>JOINT/SHARED</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1400835</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>148046.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>242478.03</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1400836</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>72900.06</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1400837</td>\n",
       "      <td>C677492872</td>\n",
       "      <td>M58665846</td>\n",
       "      <td>money payment</td>\n",
       "      <td>165.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>food</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4826.80</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>M58665846</td>\n",
       "      <td>Student 959699</td>\n",
       "      <td>19.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>LOW</td>\n",
       "      <td>407.0</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1400839</td>\n",
       "      <td>C490955644</td>\n",
       "      <td>C1924301001</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>250.0</td>\n",
       "      <td>Check</td>\n",
       "      <td>laundry rent</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>359404.15</td>\n",
       "      <td>...</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   All_IDs IdOfOrigStudent IdOfDestStudent transactionType  hourStep  \\\n",
       "0  1400834      C606683033     M1233701161   money payment     359.0   \n",
       "1  1400835             NaN             NaN             NaN       NaN   \n",
       "2  1400836             NaN             NaN             NaN       NaN   \n",
       "3  1400837      C677492872       M58665846   money payment     165.0   \n",
       "4  1400839      C490955644     C1924301001    cash outflow     250.0   \n",
       "\n",
       "  transaction_device      comments  oldBalanceOfOrigStudent_send  \\\n",
       "0        Net Banking        dinner                        6063.0   \n",
       "1                NaN           NaN                      148046.0   \n",
       "2                NaN           NaN                           0.0   \n",
       "3           ATM card          food                           0.0   \n",
       "4              Check  laundry rent                           0.0   \n",
       "\n",
       "   newBalanceOfOrigStudent_send  transactionAmount_send  ...  \\\n",
       "0                       1225.24                 4837.76  ...   \n",
       "1                          0.00               242478.03  ...   \n",
       "2                          0.00                72900.06  ...   \n",
       "3                          0.00                 4826.80  ...   \n",
       "4                          0.00               359404.15  ...   \n",
       "\n",
       "   AccountType_orig  StudentId_dest  StudentName_dest StudentAge_dest  \\\n",
       "0        INDIVIDUAL     M1233701161   Student 1654691            28.0   \n",
       "1               NaN             NaN               NaN             NaN   \n",
       "2               NaN             NaN               NaN             NaN   \n",
       "3        INDIVIDUAL       M58665846    Student 959699            19.0   \n",
       "4        INDIVIDUAL             NaN               NaN             NaN   \n",
       "\n",
       "  StudentYear_dest  TransactionFrequency_dest  \\\n",
       "0              4.0                     MEDIUM   \n",
       "1              NaN                        NaN   \n",
       "2              NaN                        NaN   \n",
       "3              4.0                        LOW   \n",
       "4              NaN                        NaN   \n",
       "\n",
       "   NumberOfTransactionsTillDate_dest AccountType_dest  isSuspectedHacker  \\\n",
       "0                              137.0     JOINT/SHARED                  0   \n",
       "1                                NaN              NaN                  0   \n",
       "2                                NaN              NaN                  0   \n",
       "3                              407.0       INDIVIDUAL                  0   \n",
       "4                                NaN              NaN                  0   \n",
       "\n",
       "  isHacker  \n",
       "0      0.0  \n",
       "1      0.0  \n",
       "2      0.0  \n",
       "3      0.0  \n",
       "4      0.0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_master_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7fc2d47d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:51.690603Z",
     "iopub.status.busy": "2024-07-13T15:28:51.690206Z",
     "iopub.status.idle": "2024-07-13T15:28:51.696431Z",
     "shell.execute_reply": "2024-07-13T15:28:51.695465Z"
    },
    "papermill": {
     "duration": 0.048672,
     "end_time": "2024-07-13T15:28:51.698274",
     "exception": false,
     "start_time": "2024-07-13T15:28:51.649602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048575, 29)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_master_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9f800542",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:51.782770Z",
     "iopub.status.busy": "2024-07-13T15:28:51.782399Z",
     "iopub.status.idle": "2024-07-13T15:28:52.549075Z",
     "shell.execute_reply": "2024-07-13T15:28:52.547945Z"
    },
    "papermill": {
     "duration": 0.810434,
     "end_time": "2024-07-13T15:28:52.551289",
     "exception": false,
     "start_time": "2024-07-13T15:28:51.740855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>oldBalanceOfDestStudent_recieve</th>\n",
       "      <th>newBalanceOfDestStudent_recieve</th>\n",
       "      <th>transactionAmount_recieve</th>\n",
       "      <th>StudentAge_orig</th>\n",
       "      <th>StudentYear_orig</th>\n",
       "      <th>NumberOfTransactionsTillDate_orig</th>\n",
       "      <th>StudentAge_dest</th>\n",
       "      <th>StudentYear_dest</th>\n",
       "      <th>NumberOfTransactionsTillDate_dest</th>\n",
       "      <th>isSuspectedHacker</th>\n",
       "      <th>isHacker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.048575e+06</td>\n",
       "      <td>638573.000000</td>\n",
       "      <td>1.048575e+06</td>\n",
       "      <td>1.048575e+06</td>\n",
       "      <td>1.048575e+06</td>\n",
       "      <td>6.388380e+05</td>\n",
       "      <td>6.388380e+05</td>\n",
       "      <td>6.388380e+05</td>\n",
       "      <td>467632.000000</td>\n",
       "      <td>467632.000000</td>\n",
       "      <td>467632.000000</td>\n",
       "      <td>467955.000000</td>\n",
       "      <td>467955.000000</td>\n",
       "      <td>467955.000000</td>\n",
       "      <td>1.048575e+06</td>\n",
       "      <td>629144.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.975402e+06</td>\n",
       "      <td>243.813093</td>\n",
       "      <td>9.153616e+05</td>\n",
       "      <td>9.350816e+05</td>\n",
       "      <td>1.723616e+05</td>\n",
       "      <td>1.042005e+06</td>\n",
       "      <td>1.147456e+06</td>\n",
       "      <td>1.725442e+05</td>\n",
       "      <td>19.500160</td>\n",
       "      <td>2.498488</td>\n",
       "      <td>498.880211</td>\n",
       "      <td>19.507130</td>\n",
       "      <td>2.502048</td>\n",
       "      <td>499.280127</td>\n",
       "      <td>1.049043e-05</td>\n",
       "      <td>0.005649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.317540e+05</td>\n",
       "      <td>143.149472</td>\n",
       "      <td>3.020181e+06</td>\n",
       "      <td>3.050648e+06</td>\n",
       "      <td>6.027530e+05</td>\n",
       "      <td>3.354299e+06</td>\n",
       "      <td>3.618595e+06</td>\n",
       "      <td>6.032280e+05</td>\n",
       "      <td>5.765201</td>\n",
       "      <td>1.117734</td>\n",
       "      <td>288.482525</td>\n",
       "      <td>5.765463</td>\n",
       "      <td>1.118300</td>\n",
       "      <td>288.661548</td>\n",
       "      <td>3.238877e-03</td>\n",
       "      <td>0.074947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.400834e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.688034e+06</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.201950e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.205628e+04</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>249.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>249.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.974943e+06</td>\n",
       "      <td>239.000000</td>\n",
       "      <td>1.662700e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>6.369115e+04</td>\n",
       "      <td>8.394871e+04</td>\n",
       "      <td>1.499686e+05</td>\n",
       "      <td>6.378591e+04</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>498.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.263476e+06</td>\n",
       "      <td>335.000000</td>\n",
       "      <td>1.293485e+05</td>\n",
       "      <td>1.794905e+05</td>\n",
       "      <td>1.990450e+05</td>\n",
       "      <td>8.553418e+05</td>\n",
       "      <td>9.982966e+05</td>\n",
       "      <td>1.990719e+05</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>749.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>749.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.549762e+06</td>\n",
       "      <td>743.000000</td>\n",
       "      <td>5.958504e+07</td>\n",
       "      <td>4.958504e+07</td>\n",
       "      <td>7.117248e+07</td>\n",
       "      <td>3.555534e+08</td>\n",
       "      <td>3.553814e+08</td>\n",
       "      <td>7.117248e+07</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            All_IDs       hourStep  oldBalanceOfOrigStudent_send  \\\n",
       "count  1.048575e+06  638573.000000                  1.048575e+06   \n",
       "mean   1.975402e+06     243.813093                  9.153616e+05   \n",
       "std    3.317540e+05     143.149472                  3.020181e+06   \n",
       "min    1.400834e+06       1.000000                  0.000000e+00   \n",
       "25%    1.688034e+06     155.000000                  0.000000e+00   \n",
       "50%    1.974943e+06     239.000000                  1.662700e+04   \n",
       "75%    2.263476e+06     335.000000                  1.293485e+05   \n",
       "max    2.549762e+06     743.000000                  5.958504e+07   \n",
       "\n",
       "       newBalanceOfOrigStudent_send  transactionAmount_send  \\\n",
       "count                  1.048575e+06            1.048575e+06   \n",
       "mean                   9.350816e+05            1.723616e+05   \n",
       "std                    3.050648e+06            6.027530e+05   \n",
       "min                    0.000000e+00            0.000000e+00   \n",
       "25%                    0.000000e+00            1.201950e+04   \n",
       "50%                    0.000000e+00            6.369115e+04   \n",
       "75%                    1.794905e+05            1.990450e+05   \n",
       "max                    4.958504e+07            7.117248e+07   \n",
       "\n",
       "       oldBalanceOfDestStudent_recieve  newBalanceOfDestStudent_recieve  \\\n",
       "count                     6.388380e+05                     6.388380e+05   \n",
       "mean                      1.042005e+06                     1.147456e+06   \n",
       "std                       3.354299e+06                     3.618595e+06   \n",
       "min                       0.000000e+00                     0.000000e+00   \n",
       "25%                       0.000000e+00                     0.000000e+00   \n",
       "50%                       8.394871e+04                     1.499686e+05   \n",
       "75%                       8.553418e+05                     9.982966e+05   \n",
       "max                       3.555534e+08                     3.553814e+08   \n",
       "\n",
       "       transactionAmount_recieve  StudentAge_orig  StudentYear_orig  \\\n",
       "count               6.388380e+05    467632.000000     467632.000000   \n",
       "mean                1.725442e+05        19.500160          2.498488   \n",
       "std                 6.032280e+05         5.765201          1.117734   \n",
       "min                 0.000000e+00        10.000000          1.000000   \n",
       "25%                 1.205628e+04        15.000000          1.000000   \n",
       "50%                 6.378591e+04        19.000000          2.000000   \n",
       "75%                 1.990719e+05        24.000000          3.000000   \n",
       "max                 7.117248e+07        29.000000          4.000000   \n",
       "\n",
       "       NumberOfTransactionsTillDate_orig  StudentAge_dest  StudentYear_dest  \\\n",
       "count                      467632.000000    467955.000000     467955.000000   \n",
       "mean                          498.880211        19.507130          2.502048   \n",
       "std                           288.482525         5.765463          1.118300   \n",
       "min                             0.000000        10.000000          1.000000   \n",
       "25%                           249.000000        15.000000          2.000000   \n",
       "50%                           498.000000        20.000000          2.000000   \n",
       "75%                           749.000000        25.000000          4.000000   \n",
       "max                           999.000000        29.000000          4.000000   \n",
       "\n",
       "       NumberOfTransactionsTillDate_dest  isSuspectedHacker       isHacker  \n",
       "count                      467955.000000       1.048575e+06  629144.000000  \n",
       "mean                          499.280127       1.049043e-05       0.005649  \n",
       "std                           288.661548       3.238877e-03       0.074947  \n",
       "min                             0.000000       0.000000e+00       0.000000  \n",
       "25%                           249.000000       0.000000e+00       0.000000  \n",
       "50%                           500.000000       0.000000e+00       0.000000  \n",
       "75%                           749.000000       0.000000e+00       0.000000  \n",
       "max                           999.000000       1.000000e+00       1.000000  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_master_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdeefc0d",
   "metadata": {
    "papermill": {
     "duration": 0.039333,
     "end_time": "2024-07-13T15:28:52.630521",
     "exception": false,
     "start_time": "2024-07-13T15:28:52.591188",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Creation <a id=\"feature-creation\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da3837c3",
   "metadata": {
    "papermill": {
     "duration": 0.038429,
     "end_time": "2024-07-13T15:28:52.707545",
     "exception": false,
     "start_time": "2024-07-13T15:28:52.669116",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Now, let's generate some useful features based on the insights gathered from our exploratory data analysis (EDA).**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b48f7e4a",
   "metadata": {
    "papermill": {
     "duration": 0.038642,
     "end_time": "2024-07-13T15:28:52.786142",
     "exception": false,
     "start_time": "2024-07-13T15:28:52.747500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's extract the first alphabet from the IdOfOrigStudent and IdOfDestStudent, as our analysis revealed a significant relationship between children-to-children (C-C) and children-to-merchant (C-M) transactions in fraudulent activities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "9900b020",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:52.865853Z",
     "iopub.status.busy": "2024-07-13T15:28:52.865529Z",
     "iopub.status.idle": "2024-07-13T15:28:53.748385Z",
     "shell.execute_reply": "2024-07-13T15:28:53.747485Z"
    },
    "papermill": {
     "duration": 0.924625,
     "end_time": "2024-07-13T15:28:53.750463",
     "exception": false,
     "start_time": "2024-07-13T15:28:52.825838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "processed_master_df['First_IdOfOrigStudent'] = processed_master_df['IdOfOrigStudent'].str[0]\n",
    "processed_master_df['First_IdOfDestStudent'] = processed_master_df['IdOfDestStudent'].str[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eac5d8ed",
   "metadata": {
    "papermill": {
     "duration": 0.04153,
     "end_time": "2024-07-13T15:28:53.832547",
     "exception": false,
     "start_time": "2024-07-13T15:28:53.791017",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's utilize the hourstep to extract various features such as 'date', 'week_number', 'month', 'day_of_month', 'day_of_week', 'hour_of_day', and 'part_of_day', categorized as {Morning, Afternoon, Evening, Night}."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5b7740aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:53.917058Z",
     "iopub.status.busy": "2024-07-13T15:28:53.915811Z",
     "iopub.status.idle": "2024-07-13T15:28:55.992118Z",
     "shell.execute_reply": "2024-07-13T15:28:55.990977Z"
    },
    "papermill": {
     "duration": 2.120297,
     "end_time": "2024-07-13T15:28:55.994420",
     "exception": false,
     "start_time": "2024-07-13T15:28:53.874123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "start_date = datetime(2024, 1, 1)\n",
    "\n",
    "processed_master_df['hourStep'].fillna(processed_master_df['hourStep'].max()+999,inplace=True)\n",
    "\n",
    "processed_master_df['date'] = processed_master_df['hourStep'].apply(lambda x: start_date + timedelta(hours=x))\n",
    "processed_master_df['date'] = pd.to_datetime(processed_master_df['date'])\n",
    "\n",
    "processed_master_df['week_number'] = processed_master_df['date'].dt.isocalendar().week\n",
    "processed_master_df['month'] = processed_master_df['date'].dt.month\n",
    "processed_master_df['day_of_month'] = processed_master_df['date'].dt.day\n",
    "processed_master_df['day_of_week'] = processed_master_df['date'].dt.dayofweek \n",
    "processed_master_df['hour_of_day'] = processed_master_df['date'].dt.hour\n",
    "\n",
    "def get_part_of_day(hour):\n",
    "    if 5 <= hour < 12:\n",
    "        return 'Morning'\n",
    "    elif 12 <= hour < 17:\n",
    "        return 'Night'\n",
    "    elif 17 <= hour < 21:\n",
    "        return 'Evening'\n",
    "    else:\n",
    "        return 'Afternoon'\n",
    "\n",
    "processed_master_df['part_of_day'] = processed_master_df['hour_of_day'].apply(get_part_of_day)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fd15f2e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:56.077171Z",
     "iopub.status.busy": "2024-07-13T15:28:56.076858Z",
     "iopub.status.idle": "2024-07-13T15:28:56.165054Z",
     "shell.execute_reply": "2024-07-13T15:28:56.164013Z"
    },
    "papermill": {
     "duration": 0.131187,
     "end_time": "2024-07-13T15:28:56.166838",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.035651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>part_of_day</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afternoon</th>\n",
       "      <td>43283</td>\n",
       "      <td>669.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Evening</th>\n",
       "      <td>132978</td>\n",
       "      <td>358.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Morning</th>\n",
       "      <td>72297</td>\n",
       "      <td>624.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Night</th>\n",
       "      <td>380586</td>\n",
       "      <td>1903.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count     sum\n",
       "part_of_day                \n",
       "Afternoon     43283   669.0\n",
       "Evening      132978   358.0\n",
       "Morning       72297   624.0\n",
       "Night        380586  1903.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_count = processed_master_df.groupby(['part_of_day'])['isHacker'].agg(['count', 'sum'])\n",
    "grouped_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62fc8cbe",
   "metadata": {
    "papermill": {
     "duration": 0.040702,
     "end_time": "2024-07-13T15:28:56.247050",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.206348",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**We can observe that the majority of our fraudulent transactions occur during the night, which aligns with our expectations.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0253460",
   "metadata": {
    "papermill": {
     "duration": 0.040496,
     "end_time": "2024-07-13T15:28:56.327711",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.287215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Now, we're generating additional features based on the Old Balance and New Balance of both the Origin and Destination students.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b1d88832",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:56.410082Z",
     "iopub.status.busy": "2024-07-13T15:28:56.409758Z",
     "iopub.status.idle": "2024-07-13T15:28:56.424525Z",
     "shell.execute_reply": "2024-07-13T15:28:56.423720Z"
    },
    "papermill": {
     "duration": 0.058759,
     "end_time": "2024-07-13T15:28:56.426911",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.368152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "processed_master_df[\"old_send_new_send\"]=processed_master_df[\"oldBalanceOfOrigStudent_send\"]-processed_master_df[\"newBalanceOfOrigStudent_send\"]\n",
    "processed_master_df[\"old_rec_new_rec\"]=processed_master_df[\"oldBalanceOfDestStudent_recieve\"]-processed_master_df[\"newBalanceOfDestStudent_recieve\"]\n",
    "processed_master_df[\"old_rec_new_rec_amt_rec\"]=processed_master_df[\"old_rec_new_rec\"]-processed_master_df[\"transactionAmount_recieve\"]\n",
    "processed_master_df[\"old_send_new_send_amt_rec\"]=processed_master_df[\"old_send_new_send\"]-processed_master_df[\"transactionAmount_send\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd1d62b7",
   "metadata": {
    "papermill": {
     "duration": 0.040433,
     "end_time": "2024-07-13T15:28:56.507679",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.467246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Converting hourstep into sine and cosine to get the cyclic nature of time**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "bb6753bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:56.589668Z",
     "iopub.status.busy": "2024-07-13T15:28:56.589309Z",
     "iopub.status.idle": "2024-07-13T15:28:56.652014Z",
     "shell.execute_reply": "2024-07-13T15:28:56.651207Z"
    },
    "papermill": {
     "duration": 0.106528,
     "end_time": "2024-07-13T15:28:56.654380",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.547852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "processed_master_df['hourstep_radians'] = (processed_master_df['hourStep'] % 24) * (2 * np.pi / 24)\n",
    "processed_master_df['cosine'] = np.cos(processed_master_df['hourstep_radians'])\n",
    "processed_master_df['sine'] = np.sin(processed_master_df['hourstep_radians'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38281a4a",
   "metadata": {
    "papermill": {
     "duration": 0.039363,
     "end_time": "2024-07-13T15:28:56.733207",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.693844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Hourly Transaction Tracking\n",
    "\n",
    "* Calculate the number of transactions before the current one for each 'IdOfOrigStudent' and 'IdOfDestStudent'\n",
    "* For transactions with isHacker = 1, we'll create a separate column and then use cumcount."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "480b463f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:28:56.813496Z",
     "iopub.status.busy": "2024-07-13T15:28:56.813122Z",
     "iopub.status.idle": "2024-07-13T15:29:04.563119Z",
     "shell.execute_reply": "2024-07-13T15:29:04.562019Z"
    },
    "papermill": {
     "duration": 7.792111,
     "end_time": "2024-07-13T15:29:04.565275",
     "exception": false,
     "start_time": "2024-07-13T15:28:56.773164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "processed_master_df = processed_master_df.sort_values(by=['IdOfOrigStudent', 'hourStep'])\n",
    "\n",
    "# Calculate the number of transactions before the current one for each 'IdOfOrigStudent' and 'IdOfDestStudent'\n",
    "processed_master_df['num_transactions_IdOfOrigStudent'] = processed_master_df.groupby(['IdOfOrigStudent']).cumcount()\n",
    "\n",
    "# For transactions with isHacker = 1, we'll create a separate column and then use cumcount.\n",
    "processed_master_df['is_hacker_transaction_IdOfOrigStudent'] = processed_master_df['isHacker'] == 1\n",
    "processed_master_df['num_hacker_transactions_IdOfOrigStudent'] = processed_master_df.groupby(['IdOfOrigStudent'])['is_hacker_transaction_IdOfOrigStudent'].cumsum() - processed_master_df['is_hacker_transaction_IdOfOrigStudent']\n",
    "\n",
    "\n",
    "processed_master_df = processed_master_df.sort_values(by=['IdOfDestStudent', 'hourStep'])\n",
    "\n",
    "# Calculate the number of transactions before the current one for each 'IdOfOrigStudent' and 'IdOfDestStudent'\n",
    "processed_master_df['num_transactions_IdOfDestStudent'] = processed_master_df.groupby(['IdOfDestStudent']).cumcount()\n",
    "\n",
    "# For transactions with isHacker = 1, we'll create a separate column and then use cumcount.\n",
    "processed_master_df['is_hacker_transaction_IdOfDestStudent'] = processed_master_df['isHacker'] == 1\n",
    "processed_master_df['num_hacker_transactions_IdOfDestStudent'] = processed_master_df.groupby(['IdOfDestStudent'])['is_hacker_transaction_IdOfDestStudent'].cumsum() - processed_master_df['is_hacker_transaction_IdOfDestStudent']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "f176840d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:04.647345Z",
     "iopub.status.busy": "2024-07-13T15:29:04.647018Z",
     "iopub.status.idle": "2024-07-13T15:29:04.952450Z",
     "shell.execute_reply": "2024-07-13T15:29:04.951300Z"
    },
    "papermill": {
     "duration": 0.34911,
     "end_time": "2024-07-13T15:29:04.954559",
     "exception": false,
     "start_time": "2024-07-13T15:29:04.605449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "processed_master_df.drop([\"is_hacker_transaction_IdOfOrigStudent\",'is_hacker_transaction_IdOfDestStudent'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "454067b1",
   "metadata": {
    "papermill": {
     "duration": 0.040954,
     "end_time": "2024-07-13T15:29:05.035806",
     "exception": false,
     "start_time": "2024-07-13T15:29:04.994852",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Selection <a id=\"feature-selection\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b868dae",
   "metadata": {
    "papermill": {
     "duration": 0.03988,
     "end_time": "2024-07-13T15:29:05.117028",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.077148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here we are eliminating the Column ID as it does not significantly contribute to the model's predictive capabilities, hence simplifying the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "74163385",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:05.199513Z",
     "iopub.status.busy": "2024-07-13T15:29:05.199122Z",
     "iopub.status.idle": "2024-07-13T15:29:05.206137Z",
     "shell.execute_reply": "2024-07-13T15:29:05.205220Z"
    },
    "papermill": {
     "duration": 0.049927,
     "end_time": "2024-07-13T15:29:05.207833",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.157906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['All_IDs', 'IdOfOrigStudent', 'IdOfDestStudent', 'transactionType',\n",
       "       'hourStep', 'transaction_device', 'comments',\n",
       "       'oldBalanceOfOrigStudent_send', 'newBalanceOfOrigStudent_send',\n",
       "       'transactionAmount_send', 'oldBalanceOfDestStudent_recieve',\n",
       "       'newBalanceOfDestStudent_recieve', 'transactionAmount_recieve',\n",
       "       'StudentId_orig', 'StudentName_orig', 'StudentAge_orig',\n",
       "       'StudentYear_orig', 'TransactionFrequency_orig',\n",
       "       'NumberOfTransactionsTillDate_orig', 'AccountType_orig',\n",
       "       'StudentId_dest', 'StudentName_dest', 'StudentAge_dest',\n",
       "       'StudentYear_dest', 'TransactionFrequency_dest',\n",
       "       'NumberOfTransactionsTillDate_dest', 'AccountType_dest',\n",
       "       'isSuspectedHacker', 'isHacker', 'First_IdOfOrigStudent',\n",
       "       'First_IdOfDestStudent', 'date', 'week_number', 'month', 'day_of_month',\n",
       "       'day_of_week', 'hour_of_day', 'part_of_day', 'old_send_new_send',\n",
       "       'old_rec_new_rec', 'old_rec_new_rec_amt_rec',\n",
       "       'old_send_new_send_amt_rec', 'hourstep_radians', 'cosine', 'sine',\n",
       "       'num_transactions_IdOfOrigStudent',\n",
       "       'num_hacker_transactions_IdOfOrigStudent',\n",
       "       'num_transactions_IdOfDestStudent',\n",
       "       'num_hacker_transactions_IdOfDestStudent'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_master_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f878bd35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:05.291519Z",
     "iopub.status.busy": "2024-07-13T15:29:05.291172Z",
     "iopub.status.idle": "2024-07-13T15:29:05.296871Z",
     "shell.execute_reply": "2024-07-13T15:29:05.295939Z"
    },
    "papermill": {
     "duration": 0.049756,
     "end_time": "2024-07-13T15:29:05.298948",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.249192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_keep=['All_IDs','transactionType',\n",
    "       'hourStep', 'transaction_device', 'comments',\n",
    "       'oldBalanceOfOrigStudent_send', 'newBalanceOfOrigStudent_send',\n",
    "       'transactionAmount_send', 'oldBalanceOfDestStudent_recieve',\n",
    "       'newBalanceOfDestStudent_recieve', 'transactionAmount_recieve',\n",
    "       'StudentAge_orig',\n",
    "       'StudentYear_orig', 'TransactionFrequency_orig',\n",
    "       'NumberOfTransactionsTillDate_orig', 'AccountType_orig',\n",
    "       'StudentAge_dest',\n",
    "       'StudentYear_dest', 'TransactionFrequency_dest',\n",
    "       'NumberOfTransactionsTillDate_dest', 'AccountType_dest',\n",
    "       'isHacker', 'First_IdOfOrigStudent',\n",
    "       'First_IdOfDestStudent', 'week_number', 'month', 'day_of_month',\n",
    "       'day_of_week', 'hour_of_day', 'part_of_day', 'old_send_new_send',\n",
    "       'old_rec_new_rec', 'old_rec_new_rec_amt_rec',\n",
    "       'old_send_new_send_amt_rec', 'hourstep_radians', 'cosine', 'sine',\n",
    "       'num_transactions_IdOfOrigStudent',\n",
    "       'num_hacker_transactions_IdOfOrigStudent',\n",
    "       'num_transactions_IdOfDestStudent',\n",
    "       'num_hacker_transactions_IdOfDestStudent']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "74b6c8fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:05.380931Z",
     "iopub.status.busy": "2024-07-13T15:29:05.380596Z",
     "iopub.status.idle": "2024-07-13T15:29:05.534261Z",
     "shell.execute_reply": "2024-07-13T15:29:05.533382Z"
    },
    "papermill": {
     "duration": 0.197382,
     "end_time": "2024-07-13T15:29:05.536629",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.339247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=processed_master_df[columns_to_keep]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5804ff2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:05.618619Z",
     "iopub.status.busy": "2024-07-13T15:29:05.618307Z",
     "iopub.status.idle": "2024-07-13T15:29:05.643292Z",
     "shell.execute_reply": "2024-07-13T15:29:05.642351Z"
    },
    "papermill": {
     "duration": 0.068383,
     "end_time": "2024-07-13T15:29:05.645114",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.576731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>transactionType</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>transaction_device</th>\n",
       "      <th>comments</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>oldBalanceOfDestStudent_recieve</th>\n",
       "      <th>newBalanceOfDestStudent_recieve</th>\n",
       "      <th>...</th>\n",
       "      <th>old_rec_new_rec</th>\n",
       "      <th>old_rec_new_rec_amt_rec</th>\n",
       "      <th>old_send_new_send_amt_rec</th>\n",
       "      <th>hourstep_radians</th>\n",
       "      <th>cosine</th>\n",
       "      <th>sine</th>\n",
       "      <th>num_transactions_IdOfOrigStudent</th>\n",
       "      <th>num_hacker_transactions_IdOfOrigStudent</th>\n",
       "      <th>num_transactions_IdOfDestStudent</th>\n",
       "      <th>num_hacker_transactions_IdOfDestStudent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>266158</th>\n",
       "      <td>1692388</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>324.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>eatables</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>1925555.14</td>\n",
       "      <td>1984821.48</td>\n",
       "      <td>...</td>\n",
       "      <td>-59266.34</td>\n",
       "      <td>-118532.69</td>\n",
       "      <td>-59266.35</td>\n",
       "      <td>3.141593</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1.224647e-16</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280319</th>\n",
       "      <td>1707939</td>\n",
       "      <td>cash inflow</td>\n",
       "      <td>38.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>breakfast</td>\n",
       "      <td>457984.00</td>\n",
       "      <td>475262.03</td>\n",
       "      <td>17278.03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-34556.06</td>\n",
       "      <td>3.665191</td>\n",
       "      <td>-0.866025</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366079</th>\n",
       "      <td>1802559</td>\n",
       "      <td>cash inflow</td>\n",
       "      <td>331.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>betting</td>\n",
       "      <td>9630810.35</td>\n",
       "      <td>9834597.12</td>\n",
       "      <td>203786.77</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-407573.54</td>\n",
       "      <td>4.974188</td>\n",
       "      <td>0.258819</td>\n",
       "      <td>-9.659258e-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>622567</th>\n",
       "      <td>2082894</td>\n",
       "      <td>money transfer</td>\n",
       "      <td>155.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>loan</td>\n",
       "      <td>30815.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>...</td>\n",
       "      <td>-2436279.67</td>\n",
       "      <td>-4872559.34</td>\n",
       "      <td>-2405464.67</td>\n",
       "      <td>2.879793</td>\n",
       "      <td>-0.965926</td>\n",
       "      <td>2.588190e-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361409</th>\n",
       "      <td>1797394</td>\n",
       "      <td>cash outflow</td>\n",
       "      <td>157.0</td>\n",
       "      <td>ATM card</td>\n",
       "      <td>Done at super market.</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>2620751.71</td>\n",
       "      <td>...</td>\n",
       "      <td>-184472.04</td>\n",
       "      <td>-368944.08</td>\n",
       "      <td>-184472.04</td>\n",
       "      <td>3.403392</td>\n",
       "      <td>-0.965926</td>\n",
       "      <td>-2.588190e-01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        All_IDs transactionType  hourStep transaction_device  \\\n",
       "266158  1692388    cash outflow     324.0           ATM card   \n",
       "280319  1707939     cash inflow      38.0           ATM card   \n",
       "366079  1802559     cash inflow     331.0           ATM card   \n",
       "622567  2082894  money transfer     155.0           ATM card   \n",
       "361409  1797394    cash outflow     157.0           ATM card   \n",
       "\n",
       "                     comments  oldBalanceOfOrigStudent_send  \\\n",
       "266158               eatables                          0.00   \n",
       "280319              breakfast                     457984.00   \n",
       "366079                betting                    9630810.35   \n",
       "622567                   loan                      30815.00   \n",
       "361409  Done at super market.                          0.00   \n",
       "\n",
       "        newBalanceOfOrigStudent_send  transactionAmount_send  \\\n",
       "266158                          0.00                59266.35   \n",
       "280319                     475262.03                17278.03   \n",
       "366079                    9834597.12               203786.77   \n",
       "622567                          0.00              2436279.67   \n",
       "361409                          0.00               184472.04   \n",
       "\n",
       "        oldBalanceOfDestStudent_recieve  newBalanceOfDestStudent_recieve  ...  \\\n",
       "266158                       1925555.14                       1984821.48  ...   \n",
       "280319                              NaN                              NaN  ...   \n",
       "366079                              NaN                              NaN  ...   \n",
       "622567                             0.00                       2436279.67  ...   \n",
       "361409                       2436279.67                       2620751.71  ...   \n",
       "\n",
       "        old_rec_new_rec  old_rec_new_rec_amt_rec  old_send_new_send_amt_rec  \\\n",
       "266158        -59266.34               -118532.69                  -59266.35   \n",
       "280319              NaN                      NaN                  -34556.06   \n",
       "366079              NaN                      NaN                 -407573.54   \n",
       "622567      -2436279.67              -4872559.34                -2405464.67   \n",
       "361409       -184472.04               -368944.08                 -184472.04   \n",
       "\n",
       "       hourstep_radians    cosine          sine  \\\n",
       "266158         3.141593 -1.000000  1.224647e-16   \n",
       "280319         3.665191 -0.866025 -5.000000e-01   \n",
       "366079         4.974188  0.258819 -9.659258e-01   \n",
       "622567         2.879793 -0.965926  2.588190e-01   \n",
       "361409         3.403392 -0.965926 -2.588190e-01   \n",
       "\n",
       "        num_transactions_IdOfOrigStudent  \\\n",
       "266158                               0.0   \n",
       "280319                               0.0   \n",
       "366079                               0.0   \n",
       "622567                               0.0   \n",
       "361409                               0.0   \n",
       "\n",
       "        num_hacker_transactions_IdOfOrigStudent  \\\n",
       "266158                                      0.0   \n",
       "280319                                      0.0   \n",
       "366079                                      0.0   \n",
       "622567                                      0.0   \n",
       "361409                                      0.0   \n",
       "\n",
       "       num_transactions_IdOfDestStudent  \\\n",
       "266158                              0.0   \n",
       "280319                              0.0   \n",
       "366079                              1.0   \n",
       "622567                              0.0   \n",
       "361409                              1.0   \n",
       "\n",
       "        num_hacker_transactions_IdOfDestStudent  \n",
       "266158                                      0.0  \n",
       "280319                                      0.0  \n",
       "366079                                      0.0  \n",
       "622567                                      0.0  \n",
       "361409                                      0.0  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "6574b9ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:05.727267Z",
     "iopub.status.busy": "2024-07-13T15:29:05.726303Z",
     "iopub.status.idle": "2024-07-13T15:29:05.733498Z",
     "shell.execute_reply": "2024-07-13T15:29:05.732525Z"
    },
    "papermill": {
     "duration": 0.050234,
     "end_time": "2024-07-13T15:29:05.735333",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.685099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['All_IDs', 'transactionType', 'hourStep', 'transaction_device',\n",
       "       'comments', 'oldBalanceOfOrigStudent_send',\n",
       "       'newBalanceOfOrigStudent_send', 'transactionAmount_send',\n",
       "       'oldBalanceOfDestStudent_recieve', 'newBalanceOfDestStudent_recieve',\n",
       "       'transactionAmount_recieve', 'StudentAge_orig', 'StudentYear_orig',\n",
       "       'TransactionFrequency_orig', 'NumberOfTransactionsTillDate_orig',\n",
       "       'AccountType_orig', 'StudentAge_dest', 'StudentYear_dest',\n",
       "       'TransactionFrequency_dest', 'NumberOfTransactionsTillDate_dest',\n",
       "       'AccountType_dest', 'isHacker', 'First_IdOfOrigStudent',\n",
       "       'First_IdOfDestStudent', 'week_number', 'month', 'day_of_month',\n",
       "       'day_of_week', 'hour_of_day', 'part_of_day', 'old_send_new_send',\n",
       "       'old_rec_new_rec', 'old_rec_new_rec_amt_rec',\n",
       "       'old_send_new_send_amt_rec', 'hourstep_radians', 'cosine', 'sine',\n",
       "       'num_transactions_IdOfOrigStudent',\n",
       "       'num_hacker_transactions_IdOfOrigStudent',\n",
       "       'num_transactions_IdOfDestStudent',\n",
       "       'num_hacker_transactions_IdOfDestStudent'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2462499a",
   "metadata": {
    "papermill": {
     "duration": 0.040524,
     "end_time": "2024-07-13T15:29:05.817107",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.776583",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Null Imputation <a id=\"null-imputation\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b872f5d",
   "metadata": {
    "papermill": {
     "duration": 0.040512,
     "end_time": "2024-07-13T15:29:05.898335",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.857823",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Making a copy of df so that we can use it further for model prediction for those handle nulls by themself like XgBoost**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "5b3eeb10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:05.981605Z",
     "iopub.status.busy": "2024-07-13T15:29:05.981257Z",
     "iopub.status.idle": "2024-07-13T15:29:06.388683Z",
     "shell.execute_reply": "2024-07-13T15:29:06.387837Z"
    },
    "papermill": {
     "duration": 0.451366,
     "end_time": "2024-07-13T15:29:06.390878",
     "exception": false,
     "start_time": "2024-07-13T15:29:05.939512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_with_nulls = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1876ad04",
   "metadata": {
    "papermill": {
     "duration": 0.039946,
     "end_time": "2024-07-13T15:29:06.471535",
     "exception": false,
     "start_time": "2024-07-13T15:29:06.431589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "380ac8a7",
   "metadata": {
    "papermill": {
     "duration": 0.040185,
     "end_time": "2024-07-13T15:29:06.552259",
     "exception": false,
     "start_time": "2024-07-13T15:29:06.512074",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here we are completing the dataset by substituting missing values with the mean in all numeric columns except for the output column, \"isHacker.\" This ensures data integrity and prevents any potential confusion for the model during analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "4b3cd49c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:06.635265Z",
     "iopub.status.busy": "2024-07-13T15:29:06.634912Z",
     "iopub.status.idle": "2024-07-13T15:29:07.117096Z",
     "shell.execute_reply": "2024-07-13T15:29:07.115818Z"
    },
    "papermill": {
     "duration": 0.526456,
     "end_time": "2024-07-13T15:29:07.119492",
     "exception": false,
     "start_time": "2024-07-13T15:29:06.593036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Select all numeric columns except column 'A'\n",
    "numeric_columns_except_is_Hacker = df.select_dtypes(include=['number']).columns.difference(['isHacker','All_IDs'])\n",
    "\n",
    "# Fill null values with the mean of selected numeric columns\n",
    "df[numeric_columns_except_is_Hacker] = df[numeric_columns_except_is_Hacker].fillna(df[numeric_columns_except_is_Hacker].mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "1a06fada",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:07.202042Z",
     "iopub.status.busy": "2024-07-13T15:29:07.201728Z",
     "iopub.status.idle": "2024-07-13T15:29:07.383305Z",
     "shell.execute_reply": "2024-07-13T15:29:07.382515Z"
    },
    "papermill": {
     "duration": 0.22488,
     "end_time": "2024-07-13T15:29:07.385316",
     "exception": false,
     "start_time": "2024-07-13T15:29:07.160436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['transactionType', 'hourStep', 'transaction_device', 'comments',\n",
       "       'oldBalanceOfOrigStudent_send', 'newBalanceOfOrigStudent_send',\n",
       "       'transactionAmount_send', 'oldBalanceOfDestStudent_recieve',\n",
       "       'newBalanceOfDestStudent_recieve', 'transactionAmount_recieve',\n",
       "       'StudentAge_orig', 'StudentYear_orig', 'TransactionFrequency_orig',\n",
       "       'NumberOfTransactionsTillDate_orig', 'AccountType_orig',\n",
       "       'StudentAge_dest', 'StudentYear_dest', 'TransactionFrequency_dest',\n",
       "       'NumberOfTransactionsTillDate_dest', 'AccountType_dest', 'isHacker',\n",
       "       'First_IdOfOrigStudent', 'First_IdOfDestStudent', 'week_number',\n",
       "       'month', 'day_of_month', 'day_of_week', 'hour_of_day', 'part_of_day',\n",
       "       'old_send_new_send', 'old_rec_new_rec', 'old_rec_new_rec_amt_rec',\n",
       "       'old_send_new_send_amt_rec', 'hourstep_radians', 'cosine', 'sine',\n",
       "       'num_transactions_IdOfOrigStudent',\n",
       "       'num_hacker_transactions_IdOfOrigStudent',\n",
       "       'num_transactions_IdOfDestStudent',\n",
       "       'num_hacker_transactions_IdOfDestStudent'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.drop(\"All_IDs\",axis=1)\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "5936396c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:07.469503Z",
     "iopub.status.busy": "2024-07-13T15:29:07.469173Z",
     "iopub.status.idle": "2024-07-13T15:29:07.770173Z",
     "shell.execute_reply": "2024-07-13T15:29:07.768913Z"
    },
    "papermill": {
     "duration": 0.345857,
     "end_time": "2024-07-13T15:29:07.772573",
     "exception": false,
     "start_time": "2024-07-13T15:29:07.426716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_with_null = df.columns[df.isnull().any()].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "d51b1602",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:07.853917Z",
     "iopub.status.busy": "2024-07-13T15:29:07.853603Z",
     "iopub.status.idle": "2024-07-13T15:29:07.859326Z",
     "shell.execute_reply": "2024-07-13T15:29:07.858505Z"
    },
    "papermill": {
     "duration": 0.048377,
     "end_time": "2024-07-13T15:29:07.860918",
     "exception": false,
     "start_time": "2024-07-13T15:29:07.812541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['transactionType',\n",
       " 'transaction_device',\n",
       " 'comments',\n",
       " 'TransactionFrequency_orig',\n",
       " 'AccountType_orig',\n",
       " 'TransactionFrequency_dest',\n",
       " 'AccountType_dest',\n",
       " 'isHacker',\n",
       " 'First_IdOfOrigStudent',\n",
       " 'First_IdOfDestStudent']"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_with_null"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc512400",
   "metadata": {
    "papermill": {
     "duration": 0.040683,
     "end_time": "2024-07-13T15:29:07.941892",
     "exception": false,
     "start_time": "2024-07-13T15:29:07.901209",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Hence we have removed all the nulls from numeric columns**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7d87e81",
   "metadata": {
    "papermill": {
     "duration": 0.040439,
     "end_time": "2024-07-13T15:29:08.023862",
     "exception": false,
     "start_time": "2024-07-13T15:29:07.983423",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Encoding Categorical Features <a id=\"encoding-categorical-features\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e44b288a",
   "metadata": {
    "papermill": {
     "duration": 0.041754,
     "end_time": "2024-07-13T15:29:08.106350",
     "exception": false,
     "start_time": "2024-07-13T15:29:08.064596",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Now that we've removed all null values from the numeric columns, let's proceed to handle nulls in the categorical columns by encoding them.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d8f8bf5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:08.190265Z",
     "iopub.status.busy": "2024-07-13T15:29:08.189924Z",
     "iopub.status.idle": "2024-07-13T15:29:09.679658Z",
     "shell.execute_reply": "2024-07-13T15:29:09.678425Z"
    },
    "papermill": {
     "duration": 1.53464,
     "end_time": "2024-07-13T15:29:09.681849",
     "exception": false,
     "start_time": "2024-07-13T15:29:08.147209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "categorical_cols = df.select_dtypes(include=['object', 'category']).columns\n",
    "df = pd.get_dummies(df, columns=categorical_cols,dtype=int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9b516630",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:09.768301Z",
     "iopub.status.busy": "2024-07-13T15:29:09.767952Z",
     "iopub.status.idle": "2024-07-13T15:29:09.790496Z",
     "shell.execute_reply": "2024-07-13T15:29:09.789353Z"
    },
    "papermill": {
     "duration": 0.068894,
     "end_time": "2024-07-13T15:29:09.792408",
     "exception": false,
     "start_time": "2024-07-13T15:29:09.723514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hourStep</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>oldBalanceOfDestStudent_recieve</th>\n",
       "      <th>newBalanceOfDestStudent_recieve</th>\n",
       "      <th>transactionAmount_recieve</th>\n",
       "      <th>StudentAge_orig</th>\n",
       "      <th>StudentYear_orig</th>\n",
       "      <th>NumberOfTransactionsTillDate_orig</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionFrequency_dest_MEDIUM</th>\n",
       "      <th>AccountType_dest_INDIVIDUAL</th>\n",
       "      <th>AccountType_dest_JOINT/SHARED</th>\n",
       "      <th>First_IdOfOrigStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_M</th>\n",
       "      <th>part_of_day_Afternoon</th>\n",
       "      <th>part_of_day_Evening</th>\n",
       "      <th>part_of_day_Morning</th>\n",
       "      <th>part_of_day_Night</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>266158</th>\n",
       "      <td>324.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>1.925555e+06</td>\n",
       "      <td>1.984821e+06</td>\n",
       "      <td>5.926635e+04</td>\n",
       "      <td>14.00000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>602.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280319</th>\n",
       "      <td>38.0</td>\n",
       "      <td>457984.00</td>\n",
       "      <td>475262.03</td>\n",
       "      <td>17278.03</td>\n",
       "      <td>1.042005e+06</td>\n",
       "      <td>1.147456e+06</td>\n",
       "      <td>1.725442e+05</td>\n",
       "      <td>19.50016</td>\n",
       "      <td>2.498488</td>\n",
       "      <td>498.880211</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366079</th>\n",
       "      <td>331.0</td>\n",
       "      <td>9630810.35</td>\n",
       "      <td>9834597.12</td>\n",
       "      <td>203786.77</td>\n",
       "      <td>1.042005e+06</td>\n",
       "      <td>1.147456e+06</td>\n",
       "      <td>1.725442e+05</td>\n",
       "      <td>23.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>856.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>622567</th>\n",
       "      <td>155.0</td>\n",
       "      <td>30815.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.436280e+06</td>\n",
       "      <td>2.436280e+06</td>\n",
       "      <td>11.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>488.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361409</th>\n",
       "      <td>157.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>2.436280e+06</td>\n",
       "      <td>2.620752e+06</td>\n",
       "      <td>1.844720e+05</td>\n",
       "      <td>18.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>933.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        hourStep  oldBalanceOfOrigStudent_send  newBalanceOfOrigStudent_send  \\\n",
       "266158     324.0                          0.00                          0.00   \n",
       "280319      38.0                     457984.00                     475262.03   \n",
       "366079     331.0                    9630810.35                    9834597.12   \n",
       "622567     155.0                      30815.00                          0.00   \n",
       "361409     157.0                          0.00                          0.00   \n",
       "\n",
       "        transactionAmount_send  oldBalanceOfDestStudent_recieve  \\\n",
       "266158                59266.35                     1.925555e+06   \n",
       "280319                17278.03                     1.042005e+06   \n",
       "366079               203786.77                     1.042005e+06   \n",
       "622567              2436279.67                     0.000000e+00   \n",
       "361409               184472.04                     2.436280e+06   \n",
       "\n",
       "        newBalanceOfDestStudent_recieve  transactionAmount_recieve  \\\n",
       "266158                     1.984821e+06               5.926635e+04   \n",
       "280319                     1.147456e+06               1.725442e+05   \n",
       "366079                     1.147456e+06               1.725442e+05   \n",
       "622567                     2.436280e+06               2.436280e+06   \n",
       "361409                     2.620752e+06               1.844720e+05   \n",
       "\n",
       "        StudentAge_orig  StudentYear_orig  NumberOfTransactionsTillDate_orig  \\\n",
       "266158         14.00000          4.000000                         602.000000   \n",
       "280319         19.50016          2.498488                         498.880211   \n",
       "366079         23.00000          3.000000                         856.000000   \n",
       "622567         11.00000          1.000000                         488.000000   \n",
       "361409         18.00000          2.000000                         933.000000   \n",
       "\n",
       "        ...  TransactionFrequency_dest_MEDIUM  AccountType_dest_INDIVIDUAL  \\\n",
       "266158  ...                                 0                            0   \n",
       "280319  ...                                 0                            1   \n",
       "366079  ...                                 0                            1   \n",
       "622567  ...                                 0                            0   \n",
       "361409  ...                                 0                            0   \n",
       "\n",
       "        AccountType_dest_JOINT/SHARED  First_IdOfOrigStudent_C  \\\n",
       "266158                              1                        1   \n",
       "280319                              0                        1   \n",
       "366079                              0                        1   \n",
       "622567                              0                        1   \n",
       "361409                              0                        1   \n",
       "\n",
       "        First_IdOfDestStudent_C  First_IdOfDestStudent_M  \\\n",
       "266158                        1                        0   \n",
       "280319                        1                        0   \n",
       "366079                        1                        0   \n",
       "622567                        1                        0   \n",
       "361409                        1                        0   \n",
       "\n",
       "        part_of_day_Afternoon  part_of_day_Evening  part_of_day_Morning  \\\n",
       "266158                      0                    0                    0   \n",
       "280319                      0                    0                    0   \n",
       "366079                      0                    1                    0   \n",
       "622567                      0                    0                    1   \n",
       "361409                      0                    0                    0   \n",
       "\n",
       "        part_of_day_Night  \n",
       "266158                  1  \n",
       "280319                  1  \n",
       "366079                  0  \n",
       "622567                  0  \n",
       "361409                  1  \n",
       "\n",
       "[5 rows x 69 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d500008",
   "metadata": {
    "papermill": {
     "duration": 0.040983,
     "end_time": "2024-07-13T15:29:09.874937",
     "exception": false,
     "start_time": "2024-07-13T15:29:09.833954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preparing to Modeling <a id=\"preparing-to-modeling\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28c067f2",
   "metadata": {
    "papermill": {
     "duration": 0.040678,
     "end_time": "2024-07-13T15:29:09.957018",
     "exception": false,
     "start_time": "2024-07-13T15:29:09.916340",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Creation of Training and Validation Sets <a id=\"creation-of-training-and-validaiton-sets\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86adcab9",
   "metadata": {
    "papermill": {
     "duration": 0.041488,
     "end_time": "2024-07-13T15:29:10.039702",
     "exception": false,
     "start_time": "2024-07-13T15:29:09.998214",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* Now in our current df we have both for which we already have our correct predections and also those for which we need to make our predections\n",
    "* As a next step we need to split our training sets into train and test sets so that we can train our model and test till our model performs well on our test sets\n",
    "* When our model gets trained well we can have predecitons for the validation sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "64592d6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:10.127009Z",
     "iopub.status.busy": "2024-07-13T15:29:10.126231Z",
     "iopub.status.idle": "2024-07-13T15:29:10.231789Z",
     "shell.execute_reply": "2024-07-13T15:29:10.230565Z"
    },
    "papermill": {
     "duration": 0.151108,
     "end_time": "2024-07-13T15:29:10.233912",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.082804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(629144, 69)\n",
      "(419431, 69)\n"
     ]
    }
   ],
   "source": [
    "given_df=df[df['isHacker'].notna()]\n",
    "predict_df=df[df['isHacker'].isna()]\n",
    "\n",
    "print(given_df.shape)\n",
    "print(predict_df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3361580f",
   "metadata": {
    "papermill": {
     "duration": 0.040767,
     "end_time": "2024-07-13T15:29:10.315619",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.274852",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Here we are separating our input variables, also known as features, from our target variable, which is the value we aim to predict, in order to train our model effectively. This division enables us to feed the features into the model to learn patterns and relationships, ultimately enabling it to make accurate predictions or classifications based on the provided features.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "81814078",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:10.399530Z",
     "iopub.status.busy": "2024-07-13T15:29:10.399123Z",
     "iopub.status.idle": "2024-07-13T15:29:10.440112Z",
     "shell.execute_reply": "2024-07-13T15:29:10.439303Z"
    },
    "papermill": {
     "duration": 0.085929,
     "end_time": "2024-07-13T15:29:10.442188",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.356259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X=given_df.drop('isHacker',axis=1)\n",
    "y=given_df['isHacker']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "fcdd8748",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:10.524765Z",
     "iopub.status.busy": "2024-07-13T15:29:10.524399Z",
     "iopub.status.idle": "2024-07-13T15:29:10.546082Z",
     "shell.execute_reply": "2024-07-13T15:29:10.545047Z"
    },
    "papermill": {
     "duration": 0.065565,
     "end_time": "2024-07-13T15:29:10.548459",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.482894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_with_null = X.columns[X.isnull().any()].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "0618349c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:10.633360Z",
     "iopub.status.busy": "2024-07-13T15:29:10.633040Z",
     "iopub.status.idle": "2024-07-13T15:29:10.638873Z",
     "shell.execute_reply": "2024-07-13T15:29:10.637920Z"
    },
    "papermill": {
     "duration": 0.050477,
     "end_time": "2024-07-13T15:29:10.640625",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.590148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_with_null"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac50e857",
   "metadata": {
    "papermill": {
     "duration": 0.041043,
     "end_time": "2024-07-13T15:29:10.723449",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.682406",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Quality check to see if we have removed all the nulls from our features**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab6a5960",
   "metadata": {
    "papermill": {
     "duration": 0.041083,
     "end_time": "2024-07-13T15:29:10.806492",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.765409",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Now we are spliting our training sets into train and test**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "6fbab66b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:10.891566Z",
     "iopub.status.busy": "2024-07-13T15:29:10.891171Z",
     "iopub.status.idle": "2024-07-13T15:29:11.321580Z",
     "shell.execute_reply": "2024-07-13T15:29:11.320711Z"
    },
    "papermill": {
     "duration": 0.475381,
     "end_time": "2024-07-13T15:29:11.323643",
     "exception": false,
     "start_time": "2024-07-13T15:29:10.848262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_valid, y_train, y_valid = train_test_split(X,y,stratify=y,train_size=0.8,test_size=0.2,random_state=0)\n",
    "X_test = X_valid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "6c2898ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:11.406881Z",
     "iopub.status.busy": "2024-07-13T15:29:11.406583Z",
     "iopub.status.idle": "2024-07-13T15:29:11.416166Z",
     "shell.execute_reply": "2024-07-13T15:29:11.415341Z"
    },
    "papermill": {
     "duration": 0.05378,
     "end_time": "2024-07-13T15:29:11.417968",
     "exception": false,
     "start_time": "2024-07-13T15:29:11.364188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "isHacker\n",
       "0.0    99.435145\n",
       "1.0     0.564855\n",
       "Name: count, dtype: float64"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.value_counts()/len(y_train) * 100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45bfcc76",
   "metadata": {
    "papermill": {
     "duration": 0.040842,
     "end_time": "2024-07-13T15:29:11.499667",
     "exception": false,
     "start_time": "2024-07-13T15:29:11.458825",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# The Data is highly imbalanced. Our goal is to detect the fraudulent payments. For our model to be effective we need to balance the data first or select the model and its hyperparameters to balance the effect of class-Imbalance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec10a728",
   "metadata": {
    "papermill": {
     "duration": 0.040848,
     "end_time": "2024-07-13T15:29:11.581583",
     "exception": false,
     "start_time": "2024-07-13T15:29:11.540735",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Baseline models and test for all features <a id=\"baseline-models-and-test-for-all-features\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67d89829",
   "metadata": {
    "papermill": {
     "duration": 0.042139,
     "end_time": "2024-07-13T15:29:11.664582",
     "exception": false,
     "start_time": "2024-07-13T15:29:11.622443",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Logistic Regression <a id=\"baseline-logistic-regression\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "71870023",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:11.751556Z",
     "iopub.status.busy": "2024-07-13T15:29:11.750563Z",
     "iopub.status.idle": "2024-07-13T15:29:19.881960Z",
     "shell.execute_reply": "2024-07-13T15:29:19.880923Z"
    },
    "papermill": {
     "duration": 8.177673,
     "end_time": "2024-07-13T15:29:19.883794",
     "exception": false,
     "start_time": "2024-07-13T15:29:11.706121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: [0.00565053 0.00565115 0.0056512  ... 1.         1.         1.        ]\n",
      "Recall: [1.         1.         1.         ... 0.20815752 0.20253165 0.        ]\n",
      "Accuracy: 0.9962568247383353\n",
      "AUROC: 0.7764591238529055\n",
      "F1 Score: 0.6258935663224782\n",
      "AUPRC: 0.597916997994588\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize logistic regression model\n",
    "logistic_model = LogisticRegression()\n",
    "\n",
    "# Train the model\n",
    "logistic_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the validation set\n",
    "y_pred_valid = logistic_model.predict(X_valid)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "precision = precision_score(y_valid, y_pred_valid)\n",
    "recall = recall_score(y_valid, y_pred_valid)\n",
    "accuracy = accuracy_score(y_valid, y_pred_valid)\n",
    "auroc = roc_auc_score(y_valid, y_pred_valid)\n",
    "f1score = f1_score(y_valid, y_pred_valid)\n",
    "# Compute probabilities and precision-recall curve\n",
    "y_scores = logistic_model.predict_proba(X_test)[:, 1]\n",
    "precision, recall, thresholds = precision_recall_curve(y_valid, y_scores)\n",
    "\n",
    "# Compute AUC for the precision-recall curve\n",
    "auc_pr = auc(recall, precision)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"AUROC:\", auroc)\n",
    "print(\"F1 Score:\", f1score)\n",
    "print(\"AUPRC:\", auc_pr)\n",
    "\n",
    "cm = confusion_matrix(y_valid, y_pred_valid)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eab864b5",
   "metadata": {
    "papermill": {
     "duration": 0.041958,
     "end_time": "2024-07-13T15:29:19.968268",
     "exception": false,
     "start_time": "2024-07-13T15:29:19.926310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Decision Tree Classifier <a id=\"baseline-decision-tree-classifier\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "adbffafe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:20.053817Z",
     "iopub.status.busy": "2024-07-13T15:29:20.053447Z",
     "iopub.status.idle": "2024-07-13T15:29:36.275872Z",
     "shell.execute_reply": "2024-07-13T15:29:36.275011Z"
    },
    "papermill": {
     "duration": 16.26732,
     "end_time": "2024-07-13T15:29:36.277807",
     "exception": false,
     "start_time": "2024-07-13T15:29:20.010487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: [0.00565053 0.99434229 1.        ]\n",
      "Recall: [1.         0.98874824 0.        ]\n",
      "Accuracy: 0.9999046324774098\n",
      "AUROC: 0.9943581360461546\n",
      "F1 Score: 0.9915373765867419\n",
      "AUPRC: 0.9915770558165933\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize decision tree model\n",
    "decision_tree_model = DecisionTreeClassifier(random_state=0)\n",
    "\n",
    "# Train the model\n",
    "decision_tree_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the validation set\n",
    "y_pred_valid = decision_tree_model.predict(X_valid)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "precision = precision_score(y_valid, y_pred_valid)\n",
    "recall = recall_score(y_valid, y_pred_valid)\n",
    "accuracy = accuracy_score(y_valid, y_pred_valid)\n",
    "auroc = roc_auc_score(y_valid, y_pred_valid)\n",
    "f1score = f1_score(y_valid, y_pred_valid)\n",
    "# Compute probabilities and precision-recall curve\n",
    "y_scores = decision_tree_model.predict_proba(X_test)[:, 1]\n",
    "precision, recall, thresholds = precision_recall_curve(y_valid, y_scores)\n",
    "\n",
    "# Compute AUC for the precision-recall curve\n",
    "auc_pr = auc(recall, precision)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"AUROC:\", auroc)\n",
    "print(\"F1 Score:\", f1score)\n",
    "print(\"AUPRC:\", auc_pr)\n",
    "\n",
    "cm = confusion_matrix(y_valid, y_pred_valid)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fa39289",
   "metadata": {
    "papermill": {
     "duration": 0.046873,
     "end_time": "2024-07-13T15:29:36.379976",
     "exception": false,
     "start_time": "2024-07-13T15:29:36.333103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Random Forests Classifier <a id=\"baseline-random-forests-classifier\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "9fc21a59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:29:36.466601Z",
     "iopub.status.busy": "2024-07-13T15:29:36.466212Z",
     "iopub.status.idle": "2024-07-13T15:31:34.329763Z",
     "shell.execute_reply": "2024-07-13T15:31:34.328841Z"
    },
    "papermill": {
     "duration": 117.953904,
     "end_time": "2024-07-13T15:31:34.376310",
     "exception": false,
     "start_time": "2024-07-13T15:29:36.422406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: [0.00565053 0.20688649 0.4200237  0.55564263 0.64480874 0.71084337\n",
      " 0.75802998 0.79819617 0.83886256 0.87192118 0.88610763 0.90191083\n",
      " 0.91591203 0.92670157 0.93642384 0.94392523 0.94772118 0.95540541\n",
      " 0.95929444 0.96190476 0.96716826 0.96982167 0.97517241 0.97922438\n",
      " 0.98058252 0.986053   0.98881119 0.99158485 0.99297753 0.99437412\n",
      " 0.9943662  0.99576869 0.99717514 0.99858557 1.         1.\n",
      " 1.         1.         1.         1.         1.         1.\n",
      " 1.         1.         1.         1.         1.         1.\n",
      " 1.         1.         1.         1.         1.         1.\n",
      " 1.         1.         1.         1.         1.         1.\n",
      " 1.         1.         1.         1.         1.         1.\n",
      " 1.         1.         1.         1.         1.         1.\n",
      " 1.         1.        ]\n",
      "Recall: [1.         0.99718706 0.99718706 0.99718706 0.99578059 0.99578059\n",
      " 0.99578059 0.99578059 0.99578059 0.99578059 0.99578059 0.99578059\n",
      " 0.99578059 0.99578059 0.99437412 0.99437412 0.99437412 0.99437412\n",
      " 0.99437412 0.99437412 0.99437412 0.99437412 0.99437412 0.99437412\n",
      " 0.99437412 0.99437412 0.99437412 0.99437412 0.99437412 0.99437412\n",
      " 0.99296765 0.99296765 0.99296765 0.99296765 0.99296765 0.99156118\n",
      " 0.99015471 0.98874824 0.9859353  0.98312236 0.97890295 0.97327707\n",
      " 0.96624473 0.95499297 0.95077356 0.94233474 0.93530239 0.92967651\n",
      " 0.91842475 0.91139241 0.90436006 0.8931083  0.88326301 0.8790436\n",
      " 0.8649789  0.85232068 0.83544304 0.82700422 0.81434599 0.79746835\n",
      " 0.77074543 0.7580872  0.73980309 0.72433193 0.70323488 0.68635724\n",
      " 0.65541491 0.6230661  0.59353024 0.55133615 0.48241913 0.38818565\n",
      " 0.23909986 0.        ]\n",
      "Accuracy: 0.9999602635322541\n",
      "AUROC: 0.9964838255977497\n",
      "F1 Score: 0.9964714184897671\n",
      "AUPRC: 0.9968195436968966\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize Random Forest Classifier model\n",
    "random_forest_model = RandomForestClassifier(random_state=0)\n",
    "\n",
    "# Train the model\n",
    "random_forest_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the validation set\n",
    "y_pred_valid = random_forest_model.predict(X_valid)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "precision = precision_score(y_valid, y_pred_valid)\n",
    "recall = recall_score(y_valid, y_pred_valid)\n",
    "accuracy = accuracy_score(y_valid, y_pred_valid)\n",
    "auroc = roc_auc_score(y_valid, y_pred_valid)\n",
    "f1score = f1_score(y_valid, y_pred_valid)\n",
    "# Compute probabilities and precision-recall curve\n",
    "y_scores = random_forest_model.predict_proba(X_test)[:, 1]\n",
    "precision, recall, thresholds = precision_recall_curve(y_valid, y_scores)\n",
    "\n",
    "# Compute AUC for the precision-recall curve\n",
    "auc_pr = auc(recall, precision)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"AUROC:\", auroc)\n",
    "print(\"F1 Score:\", f1score)\n",
    "print(\"AUPRC:\", auc_pr)\n",
    "\n",
    "cm = confusion_matrix(y_valid, y_pred_valid)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acf3761a",
   "metadata": {
    "papermill": {
     "duration": 0.042709,
     "end_time": "2024-07-13T15:31:34.461489",
     "exception": false,
     "start_time": "2024-07-13T15:31:34.418780",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# XGB Classifier <a id=\"baseline-xgb-classifier\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "9ff69434",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:31:34.549530Z",
     "iopub.status.busy": "2024-07-13T15:31:34.549130Z",
     "iopub.status.idle": "2024-07-13T15:31:51.749293Z",
     "shell.execute_reply": "2024-07-13T15:31:51.748385Z"
    },
    "papermill": {
     "duration": 17.246949,
     "end_time": "2024-07-13T15:31:51.751086",
     "exception": false,
     "start_time": "2024-07-13T15:31:34.504137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: [0.00565053 0.00565057 0.00565062 ... 1.         1.         1.        ]\n",
      "Recall: [1.         1.         1.         ... 0.00281294 0.00140647 0.        ]\n",
      "Accuracy: 0.99961058261609\n",
      "AUROC: 0.9781277866099465\n",
      "F1 Score: 0.9652235628105039\n",
      "AUPRC: 0.991428283173184\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize XGBoost Classifier model\n",
    "xgb_model = xgb.XGBClassifier()\n",
    "\n",
    "# Train the model\n",
    "xgb_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the validation set\n",
    "y_pred_valid = xgb_model.predict(X_valid)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "precision = precision_score(y_valid, y_pred_valid)\n",
    "recall = recall_score(y_valid, y_pred_valid)\n",
    "accuracy = accuracy_score(y_valid, y_pred_valid)\n",
    "auroc = roc_auc_score(y_valid, y_pred_valid)\n",
    "f1score = f1_score(y_valid, y_pred_valid)\n",
    "# Compute probabilities and precision-recall curve\n",
    "y_scores = xgb_model.predict_proba(X_test)[:, 1]\n",
    "precision, recall, thresholds = precision_recall_curve(y_valid, y_scores)\n",
    "\n",
    "# Compute AUC for the precision-recall curve\n",
    "auc_pr = auc(recall, precision)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"AUROC:\", auroc)\n",
    "print(\"F1 Score:\", f1score)\n",
    "print(\"AUPRC:\", auc_pr)\n",
    "\n",
    "cm = confusion_matrix(y_valid, y_pred_valid)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82b70365",
   "metadata": {
    "papermill": {
     "duration": 0.055448,
     "end_time": "2024-07-13T15:31:51.864420",
     "exception": false,
     "start_time": "2024-07-13T15:31:51.808972",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LGBM Classifier <a id=\"baseline-lgbm-classifier\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "bb15d061",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:31:51.952724Z",
     "iopub.status.busy": "2024-07-13T15:31:51.952397Z",
     "iopub.status.idle": "2024-07-13T15:32:03.098337Z",
     "shell.execute_reply": "2024-07-13T15:32:03.097408Z"
    },
    "papermill": {
     "duration": 11.193255,
     "end_time": "2024-07-13T15:32:03.101166",
     "exception": false,
     "start_time": "2024-07-13T15:31:51.907911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
      "[LightGBM] [Info] Number of positive: 2843, number of negative: 500472\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.190879 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 3616\n",
      "[LightGBM] [Info] Number of data points in the train set: 503315, number of used features: 67\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.005649 -> initscore=-5.170692\n",
      "[LightGBM] [Info] Start training from score -5.170692\n",
      "Precision: [0.00565053 0.00221265 0.00221273 ... 0.03885542 0.03886713 1.        ]\n",
      "Recall: [1.         0.18424754 0.18424754 ... 0.1814346  0.1814346  0.        ]\n",
      "Accuracy: 0.9700069141453878\n",
      "AUROC: 0.5779613412027654\n",
      "F1 Score: 0.06398809523809523\n",
      "AUPRC: 0.09746369879086088\n"
     ]
    },
    {
     "data": {
      "image/png": "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+XIYGxurluXm5uLYsWOcA0FERKShZJsD4eTkBAC4e/cuqlatqna5Qk9PD46OjggJCUHjxo0l9805EERERCVTYR4k5ePjg+3bt8PCwqLU+mSAICIiKpkKEyDKAgMEERFRyVSYuzB69OiBn376qUD7zJkz8emnn8pQEREREb2N7AHi2LFj6NChQ4H29u3b49ixYzJURERERG8je4BITU0t9HZNXV3dEr1Ii4iIiMqe7AGidu3a2LRpU4H2jRs3wt3dXYaKiIiI6G1kfxfGhAkT0L17d8TFxaFly5YAgD///BMbNmzAli1bZK6OiIiICqMRd2Hs3r0b06dPx/nz52FgYIA6depg0qRJ8Pb2LlF/vAuDiIioZP4nbuO8fPkyatWqJXk7BggiIqKSqTC3cb7u+fPnWLp0KRo1aoS6devKXQ4REREVQmMCxLFjx+Dv7w9bW1vMnj0bLVu2RFRUlNxlERERUSFknUSZmJiI1atXY8WKFXj27Bn8/PyQlZWFHTt28A4MIiIiDSbbCETnzp3h6uqKixcvIjQ0FA8ePMCCBQvkKoeIiIgkkG0EYu/evRg+fDiGDBmCGjVqyFUGERERlYBsIxAnTpzA8+fP0aBBAzRu3Bg///wzHj58KFc5REREJIFsAeKjjz7CsmXLkJCQgC+//BIbN26EnZ0d8vLycODAATx//lyu0oiIiOgtNOo5EDExMVixYgXCw8Px9OlTtGnTBr///rvkfvgcCCIiopKp0A+Sys3Nxc6dO7Fy5UoGCCIionJUoQPEu2KAICIiKpkK+yRKIiIi0nwMEERERCQZAwQRERFJxgBBREREkjFAEBERkWQMEERERCQZAwQRERFJxgBBREREkjFAEBERkWQMEERERCQZAwQRERFJxgBBREREkjFAEBERkWQMEERERCQZAwQRERFJxgBBREREkjFAEBERkWQMEERERCQZAwQRERFJxgBBREREkjFAEBERkWQMEERERCQZAwQRERFJxgBBREREkimEEELuIojeJCsrCzNmzMC4ceOgVCrlLoeIXsHz87+LAYI03rNnz2BmZoaUlBSYmprKXQ4RvYLn538XL2EQERGRZAwQREREJBkDBBEREUnGAEEaT6lUYtKkSZygRaSBeH7+d3ESJREREUnGEQgiIiKSjAGCiIiIJGOAICIiIskYIEglMDAQ3bp1U31u0aIF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",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize LGBM Classifier model\n",
    "lgbm_model = lgb.LGBMClassifier()\n",
    "\n",
    "# Train the model\n",
    "lgbm_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the validation set\n",
    "y_pred_valid = lgbm_model.predict(X_valid)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "precision = precision_score(y_valid, y_pred_valid)\n",
    "recall = recall_score(y_valid, y_pred_valid)\n",
    "accuracy = accuracy_score(y_valid, y_pred_valid)\n",
    "auroc = roc_auc_score(y_valid, y_pred_valid)\n",
    "f1score = f1_score(y_valid, y_pred_valid)\n",
    "# Compute probabilities and precision-recall curve\n",
    "y_scores = lgbm_model.predict_proba(X_test)[:, 1]\n",
    "precision, recall, thresholds = precision_recall_curve(y_valid, y_scores)\n",
    "\n",
    "# Compute AUC for the precision-recall curve\n",
    "auc_pr = auc(recall, precision)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(\"Precision:\", precision)\n",
    "print(\"Recall:\", recall)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"AUROC:\", auroc)\n",
    "print(\"F1 Score:\", f1score)\n",
    "print(\"AUPRC:\", auc_pr)\n",
    "\n",
    "cm = confusion_matrix(y_valid, y_pred_valid)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fa648d6",
   "metadata": {
    "papermill": {
     "duration": 0.0453,
     "end_time": "2024-07-13T15:32:03.202993",
     "exception": false,
     "start_time": "2024-07-13T15:32:03.157693",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Create a tabluar view of all the model performances "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5fd5667",
   "metadata": {
    "papermill": {
     "duration": 0.041534,
     "end_time": "2024-07-13T15:32:03.286753",
     "exception": false,
     "start_time": "2024-07-13T15:32:03.245219",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# BEST - Model with Hyperparameter Tuning <a id=\"models-with-hyperparameter-tuning\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11cbd9d3",
   "metadata": {
    "papermill": {
     "duration": 0.042533,
     "end_time": "2024-07-13T15:32:03.371122",
     "exception": false,
     "start_time": "2024-07-13T15:32:03.328589",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This is used to select top features for our Final Model**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf7706b7",
   "metadata": {
    "papermill": {
     "duration": 0.043709,
     "end_time": "2024-07-13T15:32:03.459361",
     "exception": false,
     "start_time": "2024-07-13T15:32:03.415652",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Encoding Categorical Features**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "f13d9bd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:03.546721Z",
     "iopub.status.busy": "2024-07-13T15:32:03.546350Z",
     "iopub.status.idle": "2024-07-13T15:32:04.753339Z",
     "shell.execute_reply": "2024-07-13T15:32:04.752176Z"
    },
    "papermill": {
     "duration": 1.252978,
     "end_time": "2024-07-13T15:32:04.755612",
     "exception": false,
     "start_time": "2024-07-13T15:32:03.502634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "categorical_cols = df_with_nulls.select_dtypes(include=['object', 'category']).columns\n",
    "df_with_nulls = pd.get_dummies(df_with_nulls, columns=categorical_cols,dtype=int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "c2b30bfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:04.845296Z",
     "iopub.status.busy": "2024-07-13T15:32:04.844953Z",
     "iopub.status.idle": "2024-07-13T15:32:04.849253Z",
     "shell.execute_reply": "2024-07-13T15:32:04.848495Z"
    },
    "papermill": {
     "duration": 0.051446,
     "end_time": "2024-07-13T15:32:04.850948",
     "exception": false,
     "start_time": "2024-07-13T15:32:04.799502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# columns_to_scale = df_with_nulls.select_dtypes(include=['float64', 'int64']).columns\n",
    "# columns_to_exclude = ['All_IDs', 'isHacker']\n",
    "\n",
    "# columns_to_scale = [col for col in columns_to_scale if col not in columns_to_exclude]\n",
    "\n",
    "# # Standard scaling on numeric columns\n",
    "# scaler = StandardScaler()\n",
    "# df_with_nulls[columns_to_scale] = scaler.fit_transform(df_with_nulls[columns_to_scale])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "a54efc50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:04.940408Z",
     "iopub.status.busy": "2024-07-13T15:32:04.940077Z",
     "iopub.status.idle": "2024-07-13T15:32:04.961059Z",
     "shell.execute_reply": "2024-07-13T15:32:04.960080Z"
    },
    "papermill": {
     "duration": 0.068443,
     "end_time": "2024-07-13T15:32:04.963217",
     "exception": false,
     "start_time": "2024-07-13T15:32:04.894774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>oldBalanceOfDestStudent_recieve</th>\n",
       "      <th>newBalanceOfDestStudent_recieve</th>\n",
       "      <th>transactionAmount_recieve</th>\n",
       "      <th>StudentAge_orig</th>\n",
       "      <th>StudentYear_orig</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionFrequency_dest_MEDIUM</th>\n",
       "      <th>AccountType_dest_INDIVIDUAL</th>\n",
       "      <th>AccountType_dest_JOINT/SHARED</th>\n",
       "      <th>First_IdOfOrigStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_M</th>\n",
       "      <th>part_of_day_Afternoon</th>\n",
       "      <th>part_of_day_Evening</th>\n",
       "      <th>part_of_day_Morning</th>\n",
       "      <th>part_of_day_Night</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>266158</th>\n",
       "      <td>1692388</td>\n",
       "      <td>324.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>1925555.14</td>\n",
       "      <td>1984821.48</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>14.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280319</th>\n",
       "      <td>1707939</td>\n",
       "      <td>38.0</td>\n",
       "      <td>457984.00</td>\n",
       "      <td>475262.03</td>\n",
       "      <td>17278.03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366079</th>\n",
       "      <td>1802559</td>\n",
       "      <td>331.0</td>\n",
       "      <td>9630810.35</td>\n",
       "      <td>9834597.12</td>\n",
       "      <td>203786.77</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>622567</th>\n",
       "      <td>2082894</td>\n",
       "      <td>155.0</td>\n",
       "      <td>30815.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361409</th>\n",
       "      <td>1797394</td>\n",
       "      <td>157.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>2620751.71</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 70 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        All_IDs  hourStep  oldBalanceOfOrigStudent_send  \\\n",
       "266158  1692388     324.0                          0.00   \n",
       "280319  1707939      38.0                     457984.00   \n",
       "366079  1802559     331.0                    9630810.35   \n",
       "622567  2082894     155.0                      30815.00   \n",
       "361409  1797394     157.0                          0.00   \n",
       "\n",
       "        newBalanceOfOrigStudent_send  transactionAmount_send  \\\n",
       "266158                          0.00                59266.35   \n",
       "280319                     475262.03                17278.03   \n",
       "366079                    9834597.12               203786.77   \n",
       "622567                          0.00              2436279.67   \n",
       "361409                          0.00               184472.04   \n",
       "\n",
       "        oldBalanceOfDestStudent_recieve  newBalanceOfDestStudent_recieve  \\\n",
       "266158                       1925555.14                       1984821.48   \n",
       "280319                              NaN                              NaN   \n",
       "366079                              NaN                              NaN   \n",
       "622567                             0.00                       2436279.67   \n",
       "361409                       2436279.67                       2620751.71   \n",
       "\n",
       "        transactionAmount_recieve  StudentAge_orig  StudentYear_orig  ...  \\\n",
       "266158                   59266.35             14.0               4.0  ...   \n",
       "280319                        NaN              NaN               NaN  ...   \n",
       "366079                        NaN             23.0               3.0  ...   \n",
       "622567                 2436279.67             11.0               1.0  ...   \n",
       "361409                  184472.04             18.0               2.0  ...   \n",
       "\n",
       "        TransactionFrequency_dest_MEDIUM  AccountType_dest_INDIVIDUAL  \\\n",
       "266158                                 0                            0   \n",
       "280319                                 0                            1   \n",
       "366079                                 0                            1   \n",
       "622567                                 0                            0   \n",
       "361409                                 0                            0   \n",
       "\n",
       "        AccountType_dest_JOINT/SHARED  First_IdOfOrigStudent_C  \\\n",
       "266158                              1                        1   \n",
       "280319                              0                        1   \n",
       "366079                              0                        1   \n",
       "622567                              0                        1   \n",
       "361409                              0                        1   \n",
       "\n",
       "        First_IdOfDestStudent_C  First_IdOfDestStudent_M  \\\n",
       "266158                        1                        0   \n",
       "280319                        1                        0   \n",
       "366079                        1                        0   \n",
       "622567                        1                        0   \n",
       "361409                        1                        0   \n",
       "\n",
       "        part_of_day_Afternoon  part_of_day_Evening  part_of_day_Morning  \\\n",
       "266158                      0                    0                    0   \n",
       "280319                      0                    0                    0   \n",
       "366079                      0                    1                    0   \n",
       "622567                      0                    0                    1   \n",
       "361409                      0                    0                    0   \n",
       "\n",
       "        part_of_day_Night  \n",
       "266158                  1  \n",
       "280319                  1  \n",
       "366079                  0  \n",
       "622567                  0  \n",
       "361409                  1  \n",
       "\n",
       "[5 rows x 70 columns]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_with_nulls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "afc6c47a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:05.052955Z",
     "iopub.status.busy": "2024-07-13T15:32:05.052611Z",
     "iopub.status.idle": "2024-07-13T15:32:05.163608Z",
     "shell.execute_reply": "2024-07-13T15:32:05.162430Z"
    },
    "papermill": {
     "duration": 0.158556,
     "end_time": "2024-07-13T15:32:05.165295",
     "exception": false,
     "start_time": "2024-07-13T15:32:05.006739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(629144, 70)\n",
      "(419431, 70)\n"
     ]
    }
   ],
   "source": [
    "given_df=df_with_nulls[df_with_nulls['isHacker'].notna()]\n",
    "predict_df=df_with_nulls[df_with_nulls['isHacker'].isna()]\n",
    "\n",
    "print(given_df.shape)\n",
    "print(predict_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "1466032e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:05.254238Z",
     "iopub.status.busy": "2024-07-13T15:32:05.253893Z",
     "iopub.status.idle": "2024-07-13T15:32:05.274670Z",
     "shell.execute_reply": "2024-07-13T15:32:05.273501Z"
    },
    "papermill": {
     "duration": 0.067276,
     "end_time": "2024-07-13T15:32:05.276355",
     "exception": false,
     "start_time": "2024-07-13T15:32:05.209079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>oldBalanceOfDestStudent_recieve</th>\n",
       "      <th>newBalanceOfDestStudent_recieve</th>\n",
       "      <th>transactionAmount_recieve</th>\n",
       "      <th>StudentAge_orig</th>\n",
       "      <th>StudentYear_orig</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionFrequency_dest_MEDIUM</th>\n",
       "      <th>AccountType_dest_INDIVIDUAL</th>\n",
       "      <th>AccountType_dest_JOINT/SHARED</th>\n",
       "      <th>First_IdOfOrigStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_M</th>\n",
       "      <th>part_of_day_Afternoon</th>\n",
       "      <th>part_of_day_Evening</th>\n",
       "      <th>part_of_day_Morning</th>\n",
       "      <th>part_of_day_Night</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>266158</th>\n",
       "      <td>1692388</td>\n",
       "      <td>324.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>1925555.14</td>\n",
       "      <td>1984821.48</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>14.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280319</th>\n",
       "      <td>1707939</td>\n",
       "      <td>38.0</td>\n",
       "      <td>457984.00</td>\n",
       "      <td>475262.03</td>\n",
       "      <td>17278.03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366079</th>\n",
       "      <td>1802559</td>\n",
       "      <td>331.0</td>\n",
       "      <td>9630810.35</td>\n",
       "      <td>9834597.12</td>\n",
       "      <td>203786.77</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>622567</th>\n",
       "      <td>2082894</td>\n",
       "      <td>155.0</td>\n",
       "      <td>30815.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361409</th>\n",
       "      <td>1797394</td>\n",
       "      <td>157.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>2620751.71</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 70 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        All_IDs  hourStep  oldBalanceOfOrigStudent_send  \\\n",
       "266158  1692388     324.0                          0.00   \n",
       "280319  1707939      38.0                     457984.00   \n",
       "366079  1802559     331.0                    9630810.35   \n",
       "622567  2082894     155.0                      30815.00   \n",
       "361409  1797394     157.0                          0.00   \n",
       "\n",
       "        newBalanceOfOrigStudent_send  transactionAmount_send  \\\n",
       "266158                          0.00                59266.35   \n",
       "280319                     475262.03                17278.03   \n",
       "366079                    9834597.12               203786.77   \n",
       "622567                          0.00              2436279.67   \n",
       "361409                          0.00               184472.04   \n",
       "\n",
       "        oldBalanceOfDestStudent_recieve  newBalanceOfDestStudent_recieve  \\\n",
       "266158                       1925555.14                       1984821.48   \n",
       "280319                              NaN                              NaN   \n",
       "366079                              NaN                              NaN   \n",
       "622567                             0.00                       2436279.67   \n",
       "361409                       2436279.67                       2620751.71   \n",
       "\n",
       "        transactionAmount_recieve  StudentAge_orig  StudentYear_orig  ...  \\\n",
       "266158                   59266.35             14.0               4.0  ...   \n",
       "280319                        NaN              NaN               NaN  ...   \n",
       "366079                        NaN             23.0               3.0  ...   \n",
       "622567                 2436279.67             11.0               1.0  ...   \n",
       "361409                  184472.04             18.0               2.0  ...   \n",
       "\n",
       "        TransactionFrequency_dest_MEDIUM  AccountType_dest_INDIVIDUAL  \\\n",
       "266158                                 0                            0   \n",
       "280319                                 0                            1   \n",
       "366079                                 0                            1   \n",
       "622567                                 0                            0   \n",
       "361409                                 0                            0   \n",
       "\n",
       "        AccountType_dest_JOINT/SHARED  First_IdOfOrigStudent_C  \\\n",
       "266158                              1                        1   \n",
       "280319                              0                        1   \n",
       "366079                              0                        1   \n",
       "622567                              0                        1   \n",
       "361409                              0                        1   \n",
       "\n",
       "        First_IdOfDestStudent_C  First_IdOfDestStudent_M  \\\n",
       "266158                        1                        0   \n",
       "280319                        1                        0   \n",
       "366079                        1                        0   \n",
       "622567                        1                        0   \n",
       "361409                        1                        0   \n",
       "\n",
       "        part_of_day_Afternoon  part_of_day_Evening  part_of_day_Morning  \\\n",
       "266158                      0                    0                    0   \n",
       "280319                      0                    0                    0   \n",
       "366079                      0                    1                    0   \n",
       "622567                      0                    0                    1   \n",
       "361409                      0                    0                    0   \n",
       "\n",
       "        part_of_day_Night  \n",
       "266158                  1  \n",
       "280319                  1  \n",
       "366079                  0  \n",
       "622567                  0  \n",
       "361409                  1  \n",
       "\n",
       "[5 rows x 70 columns]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "given_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "0f9a4a90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:05.365821Z",
     "iopub.status.busy": "2024-07-13T15:32:05.365440Z",
     "iopub.status.idle": "2024-07-13T15:32:05.411805Z",
     "shell.execute_reply": "2024-07-13T15:32:05.410875Z"
    },
    "papermill": {
     "duration": 0.094236,
     "end_time": "2024-07-13T15:32:05.413988",
     "exception": false,
     "start_time": "2024-07-13T15:32:05.319752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X=given_df.drop(['isHacker','All_IDs'],axis=1)\n",
    "y=given_df['isHacker']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e7325048",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:05.504889Z",
     "iopub.status.busy": "2024-07-13T15:32:05.504377Z",
     "iopub.status.idle": "2024-07-13T15:32:05.526525Z",
     "shell.execute_reply": "2024-07-13T15:32:05.525672Z"
    },
    "papermill": {
     "duration": 0.06966,
     "end_time": "2024-07-13T15:32:05.528329",
     "exception": false,
     "start_time": "2024-07-13T15:32:05.458669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hourStep</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>oldBalanceOfDestStudent_recieve</th>\n",
       "      <th>newBalanceOfDestStudent_recieve</th>\n",
       "      <th>transactionAmount_recieve</th>\n",
       "      <th>StudentAge_orig</th>\n",
       "      <th>StudentYear_orig</th>\n",
       "      <th>NumberOfTransactionsTillDate_orig</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionFrequency_dest_MEDIUM</th>\n",
       "      <th>AccountType_dest_INDIVIDUAL</th>\n",
       "      <th>AccountType_dest_JOINT/SHARED</th>\n",
       "      <th>First_IdOfOrigStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_M</th>\n",
       "      <th>part_of_day_Afternoon</th>\n",
       "      <th>part_of_day_Evening</th>\n",
       "      <th>part_of_day_Morning</th>\n",
       "      <th>part_of_day_Night</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>266158</th>\n",
       "      <td>324.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>1925555.14</td>\n",
       "      <td>1984821.48</td>\n",
       "      <td>59266.35</td>\n",
       "      <td>14.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>602.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280319</th>\n",
       "      <td>38.0</td>\n",
       "      <td>457984.00</td>\n",
       "      <td>475262.03</td>\n",
       "      <td>17278.03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366079</th>\n",
       "      <td>331.0</td>\n",
       "      <td>9630810.35</td>\n",
       "      <td>9834597.12</td>\n",
       "      <td>203786.77</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>856.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>622567</th>\n",
       "      <td>155.0</td>\n",
       "      <td>30815.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>488.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361409</th>\n",
       "      <td>157.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>2436279.67</td>\n",
       "      <td>2620751.71</td>\n",
       "      <td>184472.04</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>933.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 68 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        hourStep  oldBalanceOfOrigStudent_send  newBalanceOfOrigStudent_send  \\\n",
       "266158     324.0                          0.00                          0.00   \n",
       "280319      38.0                     457984.00                     475262.03   \n",
       "366079     331.0                    9630810.35                    9834597.12   \n",
       "622567     155.0                      30815.00                          0.00   \n",
       "361409     157.0                          0.00                          0.00   \n",
       "\n",
       "        transactionAmount_send  oldBalanceOfDestStudent_recieve  \\\n",
       "266158                59266.35                       1925555.14   \n",
       "280319                17278.03                              NaN   \n",
       "366079               203786.77                              NaN   \n",
       "622567              2436279.67                             0.00   \n",
       "361409               184472.04                       2436279.67   \n",
       "\n",
       "        newBalanceOfDestStudent_recieve  transactionAmount_recieve  \\\n",
       "266158                       1984821.48                   59266.35   \n",
       "280319                              NaN                        NaN   \n",
       "366079                              NaN                        NaN   \n",
       "622567                       2436279.67                 2436279.67   \n",
       "361409                       2620751.71                  184472.04   \n",
       "\n",
       "        StudentAge_orig  StudentYear_orig  NumberOfTransactionsTillDate_orig  \\\n",
       "266158             14.0               4.0                              602.0   \n",
       "280319              NaN               NaN                                NaN   \n",
       "366079             23.0               3.0                              856.0   \n",
       "622567             11.0               1.0                              488.0   \n",
       "361409             18.0               2.0                              933.0   \n",
       "\n",
       "        ...  TransactionFrequency_dest_MEDIUM  AccountType_dest_INDIVIDUAL  \\\n",
       "266158  ...                                 0                            0   \n",
       "280319  ...                                 0                            1   \n",
       "366079  ...                                 0                            1   \n",
       "622567  ...                                 0                            0   \n",
       "361409  ...                                 0                            0   \n",
       "\n",
       "        AccountType_dest_JOINT/SHARED  First_IdOfOrigStudent_C  \\\n",
       "266158                              1                        1   \n",
       "280319                              0                        1   \n",
       "366079                              0                        1   \n",
       "622567                              0                        1   \n",
       "361409                              0                        1   \n",
       "\n",
       "        First_IdOfDestStudent_C  First_IdOfDestStudent_M  \\\n",
       "266158                        1                        0   \n",
       "280319                        1                        0   \n",
       "366079                        1                        0   \n",
       "622567                        1                        0   \n",
       "361409                        1                        0   \n",
       "\n",
       "        part_of_day_Afternoon  part_of_day_Evening  part_of_day_Morning  \\\n",
       "266158                      0                    0                    0   \n",
       "280319                      0                    0                    0   \n",
       "366079                      0                    1                    0   \n",
       "622567                      0                    0                    1   \n",
       "361409                      0                    0                    0   \n",
       "\n",
       "        part_of_day_Night  \n",
       "266158                  1  \n",
       "280319                  1  \n",
       "366079                  0  \n",
       "622567                  0  \n",
       "361409                  1  \n",
       "\n",
       "[5 rows x 68 columns]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "71358cc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:32:05.620777Z",
     "iopub.status.busy": "2024-07-13T15:32:05.619788Z",
     "iopub.status.idle": "2024-07-13T15:33:42.462798Z",
     "shell.execute_reply": "2024-07-13T15:33:42.461751Z"
    },
    "papermill": {
     "duration": 96.891348,
     "end_time": "2024-07-13T15:33:42.464585",
     "exception": false,
     "start_time": "2024-07-13T15:32:05.573237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [01:09<00:00, 23.02s/trial, best loss: -0.9930122757318225]\n",
      "Best hyperparameters: {'colsample_bytree': 0.6847299517776593, 'learning_rate': 0.1929612407430031, 'max_depth': 5, 'n_estimators': 300, 'scale_pos_weight': 3.7039722145679637, 'subsample': 0.7793728412920121}\n",
      "Training performance: {'F1': 0.9930122757318225, 'Accuracy': 0.9999215865790132, 'Precision': 0.9868618618618619, 'Recall': 0.9992398327632079}\n",
      "Testing performance: {'F1': 0.9645922746781116, 'Accuracy': 0.9995803822336381, 'Precision': 0.9553666312433581, 'Recall': 0.9739978331527628}\n",
      "Area under the Precision-Recall curve: 0.9927518877125728\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
    "\n",
    "# Define the space of hyperparameters to search\n",
    "space = {\n",
    "    'max_depth': hp.choice('max_depth', range(3, 8)),  # Using range for max_depth\n",
    "    'learning_rate': hp.uniform('learning_rate', 0.01, 0.2),\n",
    "    'n_estimators': 300,  # Fixed value, so not a hyperparameter to optimize\n",
    "    'colsample_bytree': hp.uniform('colsample_bytree', 0.5, 1),\n",
    "    'subsample': hp.uniform('subsample', 0.5, 1),\n",
    "    'scale_pos_weight': hp.uniform('scale_pos_weight', 1, 10)\n",
    "}\n",
    "\n",
    "# Objective function to minimize\n",
    "def objective(params):\n",
    "    params['n_estimators'] = 300  # Adding n_estimators as it's a fixed value\n",
    "    clf = xgb.XGBClassifier(**params)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_train)\n",
    "    f1 = f1_score(y_train, y_pred, average='binary')\n",
    "    return {'loss': -f1, 'status': STATUS_OK}\n",
    "\n",
    "# Run the hyperparameter search using the TPE algorithm\n",
    "trials = Trials()\n",
    "best = fmin(fn=objective,\n",
    "            space=space,\n",
    "            algo=tpe.suggest,\n",
    "            max_evals=3,\n",
    "            trials=trials)\n",
    "\n",
    "# Extract best parameters\n",
    "best_params = space_eval(space, best)\n",
    "print(\"Best hyperparameters:\", best_params)\n",
    "\n",
    "# Train the model with the best parameters\n",
    "model = xgb.XGBClassifier(**best_params)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate the model on training and testing data\n",
    "y_pred_train = model.predict(X_train)\n",
    "y_pred_test = model.predict(X_test)\n",
    "\n",
    "metrics_train = {\n",
    "    'F1': f1_score(y_train, y_pred_train),\n",
    "    'Accuracy': accuracy_score(y_train, y_pred_train),\n",
    "    'Precision': precision_score(y_train, y_pred_train),\n",
    "    'Recall': recall_score(y_train, y_pred_train)\n",
    "}\n",
    "\n",
    "metrics_test = {\n",
    "    'F1': f1_score(y_test, y_pred_test),\n",
    "    'Accuracy': accuracy_score(y_test, y_pred_test),\n",
    "    'Precision': precision_score(y_test, y_pred_test),\n",
    "    'Recall': recall_score(y_test, y_pred_test)\n",
    "}\n",
    "\n",
    "print(\"Training performance:\", metrics_train)\n",
    "print(\"Testing performance:\", metrics_test)\n",
    "\n",
    "# Compute probabilities and precision-recall curve\n",
    "y_scores = model.predict_proba(X_test)[:, 1]\n",
    "precision, recall, thresholds = precision_recall_curve(y_test, y_scores)\n",
    "\n",
    "# Compute AUC for the precision-recall curve\n",
    "auc_pr = auc(recall, precision)\n",
    "print('Area under the Precision-Recall curve:', auc_pr)\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_test)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34cfb4dd",
   "metadata": {
    "papermill": {
     "duration": 0.046964,
     "end_time": "2024-07-13T15:33:42.569613",
     "exception": false,
     "start_time": "2024-07-13T15:33:42.522649",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Importance <a id=\"feature-importance\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f04a386",
   "metadata": {
    "papermill": {
     "duration": 0.043044,
     "end_time": "2024-07-13T15:33:42.656570",
     "exception": false,
     "start_time": "2024-07-13T15:33:42.613526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Next, we'll assess the feature importance to identify and remove non-important features from our dataset. This will allow us to train our model more efficiently and prevant from overfitting.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "8282245e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:33:42.746307Z",
     "iopub.status.busy": "2024-07-13T15:33:42.745987Z",
     "iopub.status.idle": "2024-07-13T15:33:42.753721Z",
     "shell.execute_reply": "2024-07-13T15:33:42.752920Z"
    },
    "papermill": {
     "duration": 0.055196,
     "end_time": "2024-07-13T15:33:42.755320",
     "exception": false,
     "start_time": "2024-07-13T15:33:42.700124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "feature_importances = model.feature_importances_ * 100 / sum(model.feature_importances_)\n",
    "\n",
    "feature_names = X_train.columns.tolist()\n",
    "\n",
    "feature_imp = pd.DataFrame({\n",
    "    'Feature': feature_names,\n",
    "    'Importance': feature_importances\n",
    "})\n",
    "\n",
    "feature_imp = feature_imp.sort_values(by='Importance', ascending=False)\n",
    "feature_imp['Importance_cum_sum']=feature_imp['Importance'].cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "565c4c25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:33:42.887434Z",
     "iopub.status.busy": "2024-07-13T15:33:42.887123Z",
     "iopub.status.idle": "2024-07-13T15:33:42.899254Z",
     "shell.execute_reply": "2024-07-13T15:33:42.898363Z"
    },
    "papermill": {
     "duration": 0.101466,
     "end_time": "2024-07-13T15:33:42.900856",
     "exception": false,
     "start_time": "2024-07-13T15:33:42.799390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Importance</th>\n",
       "      <th>Importance_cum_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>newBalanceOfOrigStudent_send</td>\n",
       "      <td>33.697239</td>\n",
       "      <td>33.697239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>transactionType_money payment</td>\n",
       "      <td>17.125471</td>\n",
       "      <td>50.822708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>old_send_new_send</td>\n",
       "      <td>8.226627</td>\n",
       "      <td>59.049335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>old_send_new_send_amt_rec</td>\n",
       "      <td>7.510856</td>\n",
       "      <td>66.560188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>hourstep_radians</td>\n",
       "      <td>6.493557</td>\n",
       "      <td>73.053741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>First_IdOfDestStudent_M</td>\n",
       "      <td>4.013467</td>\n",
       "      <td>77.067207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>transactionType_money transfer</td>\n",
       "      <td>3.117838</td>\n",
       "      <td>80.185043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>transactionType_cash inflow</td>\n",
       "      <td>2.637400</td>\n",
       "      <td>82.822441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>transactionType_cash outflow</td>\n",
       "      <td>1.964774</td>\n",
       "      <td>84.787216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>oldBalanceOfOrigStudent_send</td>\n",
       "      <td>1.621653</td>\n",
       "      <td>86.408867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>old_rec_new_rec</td>\n",
       "      <td>1.399153</td>\n",
       "      <td>87.808022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>transactionAmount_send</td>\n",
       "      <td>1.195819</td>\n",
       "      <td>89.003838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>First_IdOfDestStudent_C</td>\n",
       "      <td>1.146159</td>\n",
       "      <td>90.149994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>transactionType_debit to acct</td>\n",
       "      <td>1.010421</td>\n",
       "      <td>91.160416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>newBalanceOfDestStudent_recieve</td>\n",
       "      <td>0.862139</td>\n",
       "      <td>92.022552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>day_of_month</td>\n",
       "      <td>0.708101</td>\n",
       "      <td>92.730652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>TransactionFrequency_dest_HIGH</td>\n",
       "      <td>0.594128</td>\n",
       "      <td>93.324783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>part_of_day_Afternoon</td>\n",
       "      <td>0.579414</td>\n",
       "      <td>93.904198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>hour_of_day</td>\n",
       "      <td>0.499777</td>\n",
       "      <td>94.403976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>week_number</td>\n",
       "      <td>0.488651</td>\n",
       "      <td>94.892624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>sine</td>\n",
       "      <td>0.453346</td>\n",
       "      <td>95.345970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>comments_loan</td>\n",
       "      <td>0.451273</td>\n",
       "      <td>95.797241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hourStep</td>\n",
       "      <td>0.309975</td>\n",
       "      <td>96.107216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>comments_food</td>\n",
       "      <td>0.224868</td>\n",
       "      <td>96.332085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>comments_eatables</td>\n",
       "      <td>0.220353</td>\n",
       "      <td>96.552437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>StudentYear_dest</td>\n",
       "      <td>0.194968</td>\n",
       "      <td>96.747406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>old_rec_new_rec_amt_rec</td>\n",
       "      <td>0.193888</td>\n",
       "      <td>96.941292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>TransactionFrequency_dest_LOW</td>\n",
       "      <td>0.190056</td>\n",
       "      <td>97.131348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>cosine</td>\n",
       "      <td>0.186068</td>\n",
       "      <td>97.317413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>comments_betting</td>\n",
       "      <td>0.164764</td>\n",
       "      <td>97.482178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NumberOfTransactionsTillDate_orig</td>\n",
       "      <td>0.154616</td>\n",
       "      <td>97.636795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>comments_breakfast</td>\n",
       "      <td>0.147794</td>\n",
       "      <td>97.784592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>transactionAmount_recieve</td>\n",
       "      <td>0.147179</td>\n",
       "      <td>97.931770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>part_of_day_Evening</td>\n",
       "      <td>0.145654</td>\n",
       "      <td>98.077423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>AccountType_orig_JOINT/SHARED</td>\n",
       "      <td>0.138837</td>\n",
       "      <td>98.216263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>part_of_day_Morning</td>\n",
       "      <td>0.136074</td>\n",
       "      <td>98.352333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>num_transactions_IdOfOrigStudent</td>\n",
       "      <td>0.127331</td>\n",
       "      <td>98.479668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>day_of_week</td>\n",
       "      <td>0.118104</td>\n",
       "      <td>98.597771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>transaction_device_Check</td>\n",
       "      <td>0.116841</td>\n",
       "      <td>98.714615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>TransactionFrequency_orig_HIGH</td>\n",
       "      <td>0.115030</td>\n",
       "      <td>98.829643</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Feature  Importance  Importance_cum_sum\n",
       "2        newBalanceOfOrigStudent_send   33.697239           33.697239\n",
       "32      transactionType_money payment   17.125471           50.822708\n",
       "18                  old_send_new_send    8.226627           59.049335\n",
       "21          old_send_new_send_amt_rec    7.510856           66.560188\n",
       "22                   hourstep_radians    6.493557           73.053741\n",
       "63            First_IdOfDestStudent_M    4.013467           77.067207\n",
       "33     transactionType_money transfer    3.117838           80.185043\n",
       "29        transactionType_cash inflow    2.637400           82.822441\n",
       "30       transactionType_cash outflow    1.964774           84.787216\n",
       "1        oldBalanceOfOrigStudent_send    1.621653           86.408867\n",
       "19                    old_rec_new_rec    1.399153           87.808022\n",
       "3              transactionAmount_send    1.195819           89.003838\n",
       "62            First_IdOfDestStudent_C    1.146159           90.149994\n",
       "31      transactionType_debit to acct    1.010421           91.160416\n",
       "5     newBalanceOfDestStudent_recieve    0.862139           92.022552\n",
       "15                       day_of_month    0.708101           92.730652\n",
       "56     TransactionFrequency_dest_HIGH    0.594128           93.324783\n",
       "64              part_of_day_Afternoon    0.579414           93.904198\n",
       "17                        hour_of_day    0.499777           94.403976\n",
       "13                        week_number    0.488651           94.892624\n",
       "24                               sine    0.453346           95.345970\n",
       "47                      comments_loan    0.451273           95.797241\n",
       "0                            hourStep    0.309975           96.107216\n",
       "45                      comments_food    0.224868           96.332085\n",
       "44                  comments_eatables    0.220353           96.552437\n",
       "11                   StudentYear_dest    0.194968           96.747406\n",
       "20            old_rec_new_rec_amt_rec    0.193888           96.941292\n",
       "57      TransactionFrequency_dest_LOW    0.190056           97.131348\n",
       "23                             cosine    0.186068           97.317413\n",
       "40                   comments_betting    0.164764           97.482178\n",
       "9   NumberOfTransactionsTillDate_orig    0.154616           97.636795\n",
       "41                 comments_breakfast    0.147794           97.784592\n",
       "6           transactionAmount_recieve    0.147179           97.931770\n",
       "65                part_of_day_Evening    0.145654           98.077423\n",
       "55      AccountType_orig_JOINT/SHARED    0.138837           98.216263\n",
       "66                part_of_day_Morning    0.136074           98.352333\n",
       "25   num_transactions_IdOfOrigStudent    0.127331           98.479668\n",
       "16                        day_of_week    0.118104           98.597771\n",
       "35           transaction_device_Check    0.116841           98.714615\n",
       "51     TransactionFrequency_orig_HIGH    0.115030           98.829643"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp.head(40)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1afc2dd3",
   "metadata": {
    "papermill": {
     "duration": 0.045013,
     "end_time": "2024-07-13T15:33:42.991697",
     "exception": false,
     "start_time": "2024-07-13T15:33:42.946684",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Columns to select for final feature**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5e0b29ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:33:43.086334Z",
     "iopub.status.busy": "2024-07-13T15:33:43.086002Z",
     "iopub.status.idle": "2024-07-13T15:33:43.091765Z",
     "shell.execute_reply": "2024-07-13T15:33:43.090557Z"
    },
    "papermill": {
     "duration": 0.054501,
     "end_time": "2024-07-13T15:33:43.093591",
     "exception": false,
     "start_time": "2024-07-13T15:33:43.039090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "important_features = feature_imp[feature_imp['Importance_cum_sum']<=95]['Feature'].tolist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36985eb5",
   "metadata": {
    "papermill": {
     "duration": 0.044853,
     "end_time": "2024-07-13T15:33:43.184058",
     "exception": false,
     "start_time": "2024-07-13T15:33:43.139205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "2c5356a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:33:43.276279Z",
     "iopub.status.busy": "2024-07-13T15:33:43.275925Z",
     "iopub.status.idle": "2024-07-13T15:33:43.286359Z",
     "shell.execute_reply": "2024-07-13T15:33:43.285615Z"
    },
    "papermill": {
     "duration": 0.058818,
     "end_time": "2024-07-13T15:33:43.288014",
     "exception": false,
     "start_time": "2024-07-13T15:33:43.229196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Importance</th>\n",
       "      <th>Importance_cum_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>newBalanceOfOrigStudent_send</td>\n",
       "      <td>33.697239</td>\n",
       "      <td>33.697239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>transactionType_money payment</td>\n",
       "      <td>17.125471</td>\n",
       "      <td>50.822708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>old_send_new_send</td>\n",
       "      <td>8.226627</td>\n",
       "      <td>59.049335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>old_send_new_send_amt_rec</td>\n",
       "      <td>7.510856</td>\n",
       "      <td>66.560188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>hourstep_radians</td>\n",
       "      <td>6.493557</td>\n",
       "      <td>73.053741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>First_IdOfOrigStudent_C</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>99.999969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>comments_lunch</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>99.999969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>num_hacker_transactions_IdOfOrigStudent</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>99.999969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>month</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>99.999969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>comments_purchased stationary</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>99.999969</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>68 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    Feature  Importance  Importance_cum_sum\n",
       "2              newBalanceOfOrigStudent_send   33.697239           33.697239\n",
       "32            transactionType_money payment   17.125471           50.822708\n",
       "18                        old_send_new_send    8.226627           59.049335\n",
       "21                old_send_new_send_amt_rec    7.510856           66.560188\n",
       "22                         hourstep_radians    6.493557           73.053741\n",
       "..                                      ...         ...                 ...\n",
       "61                  First_IdOfOrigStudent_C    0.000000           99.999969\n",
       "48                           comments_lunch    0.000000           99.999969\n",
       "26  num_hacker_transactions_IdOfOrigStudent    0.000000           99.999969\n",
       "14                                    month    0.000000           99.999969\n",
       "49            comments_purchased stationary    0.000000           99.999969\n",
       "\n",
       "[68 rows x 3 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24aa18a6",
   "metadata": {
    "papermill": {
     "duration": 0.04432,
     "end_time": "2024-07-13T15:33:43.377051",
     "exception": false,
     "start_time": "2024-07-13T15:33:43.332731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "776089b5",
   "metadata": {
    "papermill": {
     "duration": 0.044773,
     "end_time": "2024-07-13T15:33:43.467537",
     "exception": false,
     "start_time": "2024-07-13T15:33:43.422764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e1f76d6e",
   "metadata": {
    "papermill": {
     "duration": 0.045947,
     "end_time": "2024-07-13T15:33:43.558990",
     "exception": false,
     "start_time": "2024-07-13T15:33:43.513043",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Final Model with Important Features <a id=\"final-models-with-important-features\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "caf92136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:33:43.651511Z",
     "iopub.status.busy": "2024-07-13T15:33:43.651143Z",
     "iopub.status.idle": "2024-07-13T15:34:27.695435Z",
     "shell.execute_reply": "2024-07-13T15:34:27.694747Z"
    },
    "papermill": {
     "duration": 44.092721,
     "end_time": "2024-07-13T15:34:27.697113",
     "exception": false,
     "start_time": "2024-07-13T15:33:43.604392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:31<00:00, 10.37s/trial, best loss: -0.9601024890190336]\n",
      "Best hyperparameters: {'colsample_bytree': 0.7413047720133514, 'gamma': 1.9900159335945067, 'learning_rate': 0.08501445115168067, 'max_depth': 5, 'n_estimators': 300, 'reg_alpha': 4.357115758608179, 'reg_lambda': 1.1309028263696053, 'scale_pos_weight': 9.916334160561659, 'subsample': 0.3357372923382529}\n",
      "Training performance: {'F1': 0.9601024890190336, 'Accuracy': 0.9995379966006722, 'Precision': 0.9258736321920226, 'Recall': 0.9969593310528316}\n",
      "Testing performance: {'F1': 0.9524804177545693, 'Accuracy': 0.9994214361100161, 'Precision': 0.9193548387096774, 'Recall': 0.9880823401950163}\n",
      "Area under the Precision-Recall curve: 0.9945202619160565\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X[important_features], y, test_size=0.25, random_state=42)\n",
    "\n",
    "# Define the space of hyperparameters to search\n",
    "space = {\n",
    "    'max_depth': hp.choice('max_depth', range(3, 8)),  # Using range for max_depth\n",
    "    'learning_rate': hp.uniform('learning_rate', 0.01, 0.2),\n",
    "    'n_estimators': 300,  # Fixed value, so not a hyperparameter to optimize\n",
    "    'colsample_bytree': hp.uniform('colsample_bytree', 0.5, 1),\n",
    "    'subsample': hp.uniform('subsample', 0.3,0.5),\n",
    "    'scale_pos_weight': hp.uniform('scale_pos_weight', 5,12),\n",
    "    'gamma': hp.uniform('gamma', 0, 5),  # Regularization term, controls node split\n",
    "    'reg_lambda': hp.uniform('reg_lambda', 0, 5),  # L2 regularization term\n",
    "    'reg_alpha': hp.uniform('reg_alpha', 0, 5)  # L1 regularization term\n",
    "\n",
    "}\n",
    "\n",
    "# Objective function to minimize\n",
    "def objective(params):\n",
    "    params['n_estimators'] = 300  # Adding n_estimators as it's a fixed value\n",
    "    clf = xgb.XGBClassifier(**params)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_train)\n",
    "    f1 = f1_score(y_train, y_pred, average='binary')\n",
    "    return {'loss': -f1, 'status': STATUS_OK}\n",
    "\n",
    "# Run the hyperparameter search using the TPE algorithm\n",
    "trials = Trials()\n",
    "best = fmin(fn=objective,\n",
    "            space=space,\n",
    "            algo=tpe.suggest,\n",
    "            max_evals=3,\n",
    "            trials=trials)\n",
    "\n",
    "# Extract best parameters\n",
    "best_params = space_eval(space, best)\n",
    "#best_params={'colsample_bytree': 0.7318073467652191, 'learning_rate': 0.039182513095905605, 'max_depth': 7, 'n_estimators': 300, 'scale_pos_weight': 1.8857050501393158, 'subsample': 0.967149051908317}\n",
    "\n",
    "print(\"Best hyperparameters:\", best_params)\n",
    "\n",
    "# Train the model with the best parameters\n",
    "model = xgb.XGBClassifier(**best_params)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate the model on training and testing data\n",
    "y_pred_train = model.predict(X_train)\n",
    "y_pred_test = model.predict(X_test)\n",
    "\n",
    "metrics_train = {\n",
    "    'F1': f1_score(y_train, y_pred_train),\n",
    "    'Accuracy': accuracy_score(y_train, y_pred_train),\n",
    "    'Precision': precision_score(y_train, y_pred_train),\n",
    "    'Recall': recall_score(y_train, y_pred_train)\n",
    "}\n",
    "\n",
    "metrics_test = {\n",
    "    'F1': f1_score(y_test, y_pred_test),\n",
    "    'Accuracy': accuracy_score(y_test, y_pred_test),\n",
    "    'Precision': precision_score(y_test, y_pred_test),\n",
    "    'Recall': recall_score(y_test, y_pred_test)\n",
    "}\n",
    "\n",
    "print(\"Training performance:\", metrics_train)\n",
    "print(\"Testing performance:\", metrics_test)\n",
    "\n",
    "# Compute probabilities and precision-recall curve\n",
    "y_scores = model.predict_proba(X_test)[:, 1]\n",
    "precision, recall, thresholds = precision_recall_curve(y_test, y_scores)\n",
    "\n",
    "# Compute AUC for the precision-recall curve\n",
    "auc_pr = auc(recall, precision)\n",
    "print('Area under the Precision-Recall curve:', auc_pr)\n",
    "\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_test)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5399e5d5",
   "metadata": {
    "papermill": {
     "duration": 0.048561,
     "end_time": "2024-07-13T15:34:27.805750",
     "exception": false,
     "start_time": "2024-07-13T15:34:27.757189",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Feature Importance**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "0f0fbeb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:34:27.899632Z",
     "iopub.status.busy": "2024-07-13T15:34:27.899277Z",
     "iopub.status.idle": "2024-07-13T15:34:27.906914Z",
     "shell.execute_reply": "2024-07-13T15:34:27.906067Z"
    },
    "papermill": {
     "duration": 0.056503,
     "end_time": "2024-07-13T15:34:27.908687",
     "exception": false,
     "start_time": "2024-07-13T15:34:27.852184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "feature_importances = model.feature_importances_ * 100 / sum(model.feature_importances_)\n",
    "\n",
    "feature_names = X_train.columns.tolist()\n",
    "\n",
    "feature_imp = pd.DataFrame({\n",
    "    'Feature': feature_names,\n",
    "    'Importance': feature_importances\n",
    "})\n",
    "\n",
    "feature_imp = feature_imp.sort_values(by='Importance', ascending=False)\n",
    "feature_imp['Importance_cum_sum']=feature_imp['Importance'].cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "8313155f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:34:28.005279Z",
     "iopub.status.busy": "2024-07-13T15:34:28.004951Z",
     "iopub.status.idle": "2024-07-13T15:34:28.015975Z",
     "shell.execute_reply": "2024-07-13T15:34:28.015018Z"
    },
    "papermill": {
     "duration": 0.062635,
     "end_time": "2024-07-13T15:34:28.018249",
     "exception": false,
     "start_time": "2024-07-13T15:34:27.955614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Importance</th>\n",
       "      <th>Importance_cum_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>newBalanceOfOrigStudent_send</td>\n",
       "      <td>26.587061</td>\n",
       "      <td>26.587061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>old_send_new_send</td>\n",
       "      <td>21.125347</td>\n",
       "      <td>47.712410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>old_send_new_send_amt_rec</td>\n",
       "      <td>16.904705</td>\n",
       "      <td>64.617111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>transactionType_money payment</td>\n",
       "      <td>6.674853</td>\n",
       "      <td>71.291962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>oldBalanceOfOrigStudent_send</td>\n",
       "      <td>3.952528</td>\n",
       "      <td>75.244492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>First_IdOfDestStudent_C</td>\n",
       "      <td>3.693334</td>\n",
       "      <td>78.937828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>transactionType_money transfer</td>\n",
       "      <td>3.531335</td>\n",
       "      <td>82.469162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>transactionType_cash outflow</td>\n",
       "      <td>3.427238</td>\n",
       "      <td>85.896400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>transactionAmount_send</td>\n",
       "      <td>3.183003</td>\n",
       "      <td>89.079407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>hourstep_radians</td>\n",
       "      <td>2.385101</td>\n",
       "      <td>91.464508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>day_of_month</td>\n",
       "      <td>1.828149</td>\n",
       "      <td>93.292656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>transactionType_cash inflow</td>\n",
       "      <td>1.563046</td>\n",
       "      <td>94.855705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>First_IdOfDestStudent_M</td>\n",
       "      <td>1.238267</td>\n",
       "      <td>96.093971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>old_rec_new_rec</td>\n",
       "      <td>1.193918</td>\n",
       "      <td>97.287888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>newBalanceOfDestStudent_recieve</td>\n",
       "      <td>1.019766</td>\n",
       "      <td>98.307655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>TransactionFrequency_dest_HIGH</td>\n",
       "      <td>0.445656</td>\n",
       "      <td>98.753311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>week_number</td>\n",
       "      <td>0.395103</td>\n",
       "      <td>99.148415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>transactionType_debit to acct</td>\n",
       "      <td>0.370097</td>\n",
       "      <td>99.518509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>hour_of_day</td>\n",
       "      <td>0.356064</td>\n",
       "      <td>99.874573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>part_of_day_Afternoon</td>\n",
       "      <td>0.125432</td>\n",
       "      <td>100.000008</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Feature  Importance  Importance_cum_sum\n",
       "0      newBalanceOfOrigStudent_send   26.587061           26.587061\n",
       "2                 old_send_new_send   21.125347           47.712410\n",
       "3         old_send_new_send_amt_rec   16.904705           64.617111\n",
       "1     transactionType_money payment    6.674853           71.291962\n",
       "9      oldBalanceOfOrigStudent_send    3.952528           75.244492\n",
       "12          First_IdOfDestStudent_C    3.693334           78.937828\n",
       "6    transactionType_money transfer    3.531335           82.469162\n",
       "8      transactionType_cash outflow    3.427238           85.896400\n",
       "11           transactionAmount_send    3.183003           89.079407\n",
       "4                  hourstep_radians    2.385101           91.464508\n",
       "15                     day_of_month    1.828149           93.292656\n",
       "7       transactionType_cash inflow    1.563046           94.855705\n",
       "5           First_IdOfDestStudent_M    1.238267           96.093971\n",
       "10                  old_rec_new_rec    1.193918           97.287888\n",
       "14  newBalanceOfDestStudent_recieve    1.019766           98.307655\n",
       "16   TransactionFrequency_dest_HIGH    0.445656           98.753311\n",
       "19                      week_number    0.395103           99.148415\n",
       "13    transactionType_debit to acct    0.370097           99.518509\n",
       "18                      hour_of_day    0.356064           99.874573\n",
       "17            part_of_day_Afternoon    0.125432          100.000008"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc09dd15",
   "metadata": {
    "papermill": {
     "duration": 0.045741,
     "end_time": "2024-07-13T15:34:28.110199",
     "exception": false,
     "start_time": "2024-07-13T15:34:28.064458",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Shap Plot**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "6f7022b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:34:28.203905Z",
     "iopub.status.busy": "2024-07-13T15:34:28.203573Z",
     "iopub.status.idle": "2024-07-13T15:35:11.707212Z",
     "shell.execute_reply": "2024-07-13T15:35:11.706116Z"
    },
    "papermill": {
     "duration": 43.603955,
     "end_time": "2024-07-13T15:35:11.760225",
     "exception": false,
     "start_time": "2024-07-13T15:34:28.156270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x950 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "explainer = shap.Explainer(model)\n",
    "shap_values = explainer(X_test)\n",
    "\n",
    "shap.summary_plot(shap_values, X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6469a57c",
   "metadata": {
    "papermill": {
     "duration": 0.062301,
     "end_time": "2024-07-13T15:35:11.875908",
     "exception": false,
     "start_time": "2024-07-13T15:35:11.813607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Precision and Recall as a function of the decision threshold**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "994b1e18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:35:11.977113Z",
     "iopub.status.busy": "2024-07-13T15:35:11.976785Z",
     "iopub.status.idle": "2024-07-13T15:35:12.843997Z",
     "shell.execute_reply": "2024-07-13T15:35:12.843023Z"
    },
    "papermill": {
     "duration": 0.919556,
     "end_time": "2024-07-13T15:35:12.845799",
     "exception": false,
     "start_time": "2024-07-13T15:35:11.926243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "thresholds = np.append(thresholds, max(y_scores))\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(thresholds, precision, label='Precision')\n",
    "plt.plot(thresholds, recall, label='Recall')\n",
    "plt.xlabel('Threshold')\n",
    "plt.ylabel('Precision/Recall')\n",
    "plt.title('Precision and Recall as a function of the decision threshold')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16b3be27",
   "metadata": {
    "papermill": {
     "duration": 0.049955,
     "end_time": "2024-07-13T15:35:12.946029",
     "exception": false,
     "start_time": "2024-07-13T15:35:12.896074",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# K-Fold Validation <a id=\"k-fold-validation\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "229d196d",
   "metadata": {
    "papermill": {
     "duration": 0.04889,
     "end_time": "2024-07-13T15:35:13.043019",
     "exception": false,
     "start_time": "2024-07-13T15:35:12.994129",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Here we are trying to validate our model performance by using K-Fold Validation**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4b8461b",
   "metadata": {
    "papermill": {
     "duration": 0.048781,
     "end_time": "2024-07-13T15:35:13.143379",
     "exception": false,
     "start_time": "2024-07-13T15:35:13.094598",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**K-fold cross-validation is like testing how well you've learned from your study notes. You divide your notes into k equal parts, then you study with all but one part, and test yourself with the part you left out. You do this k times, rotating which part you leave out each time. Finally, you average your scores to see how well you understood overall.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "943f3487",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:35:13.242760Z",
     "iopub.status.busy": "2024-07-13T15:35:13.242407Z",
     "iopub.status.idle": "2024-07-13T15:35:13.255293Z",
     "shell.execute_reply": "2024-07-13T15:35:13.254504Z"
    },
    "papermill": {
     "duration": 0.064984,
     "end_time": "2024-07-13T15:35:13.257364",
     "exception": false,
     "start_time": "2024-07-13T15:35:13.192380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X1=X[important_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "983339f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:35:13.357561Z",
     "iopub.status.busy": "2024-07-13T15:35:13.357220Z",
     "iopub.status.idle": "2024-07-13T15:35:13.363560Z",
     "shell.execute_reply": "2024-07-13T15:35:13.362534Z"
    },
    "papermill": {
     "duration": 0.0592,
     "end_time": "2024-07-13T15:35:13.365501",
     "exception": false,
     "start_time": "2024-07-13T15:35:13.306301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(629144, 20)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "233d1da5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:35:13.465836Z",
     "iopub.status.busy": "2024-07-13T15:35:13.465500Z",
     "iopub.status.idle": "2024-07-13T15:37:12.969782Z",
     "shell.execute_reply": "2024-07-13T15:37:12.968835Z"
    },
    "papermill": {
     "duration": 119.557239,
     "end_time": "2024-07-13T15:37:12.971958",
     "exception": false,
     "start_time": "2024-07-13T15:35:13.414719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "kfold_df = pd.DataFrame()\n",
    "\n",
    "for i in range(10):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X1, y, test_size=0.25, random_state=i)\n",
    "    model1 = xgb.XGBClassifier(**best_params)\n",
    "    model1.fit(X_train, y_train)\n",
    "    y_pred_train = model1.predict(X_train)\n",
    "    y_pred_test = model1.predict(X_test)\n",
    "\n",
    "    metrics = pd.DataFrame({\n",
    "        \"Fold\": [i],\n",
    "        'F1_train': [f1_score(y_train, y_pred_train)],\n",
    "        'Accuracy_train': [accuracy_score(y_train, y_pred_train)],\n",
    "        'Precision_train': [precision_score(y_train, y_pred_train)],\n",
    "        'Recall_train': [recall_score(y_train, y_pred_train)],\n",
    "        'F1_test': [f1_score(y_test, y_pred_test)],\n",
    "        'Accuracy_test': [accuracy_score(y_test, y_pred_test)],\n",
    "        'Precision_test': [precision_score(y_test, y_pred_test)],\n",
    "        'Recall_test': [recall_score(y_test, y_pred_test)]\n",
    "    })\n",
    "\n",
    "    \n",
    "    kfold_df = pd.concat([kfold_df, metrics])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "5390c30a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:13.067255Z",
     "iopub.status.busy": "2024-07-13T15:37:13.066944Z",
     "iopub.status.idle": "2024-07-13T15:37:13.080836Z",
     "shell.execute_reply": "2024-07-13T15:37:13.079893Z"
    },
    "papermill": {
     "duration": 0.063633,
     "end_time": "2024-07-13T15:37:13.082984",
     "exception": false,
     "start_time": "2024-07-13T15:37:13.019351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fold</th>\n",
       "      <th>F1_train</th>\n",
       "      <th>Accuracy_train</th>\n",
       "      <th>Precision_train</th>\n",
       "      <th>Recall_train</th>\n",
       "      <th>F1_test</th>\n",
       "      <th>Accuracy_test</th>\n",
       "      <th>Precision_test</th>\n",
       "      <th>Recall_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.958041</td>\n",
       "      <td>0.999506</td>\n",
       "      <td>0.922650</td>\n",
       "      <td>0.996255</td>\n",
       "      <td>0.950270</td>\n",
       "      <td>0.999415</td>\n",
       "      <td>0.909938</td>\n",
       "      <td>0.994344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.961328</td>\n",
       "      <td>0.999551</td>\n",
       "      <td>0.928144</td>\n",
       "      <td>0.996973</td>\n",
       "      <td>0.950474</td>\n",
       "      <td>0.999402</td>\n",
       "      <td>0.913880</td>\n",
       "      <td>0.990121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0.955235</td>\n",
       "      <td>0.999481</td>\n",
       "      <td>0.916229</td>\n",
       "      <td>0.997710</td>\n",
       "      <td>0.952136</td>\n",
       "      <td>0.999409</td>\n",
       "      <td>0.916749</td>\n",
       "      <td>0.990364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0.958696</td>\n",
       "      <td>0.999517</td>\n",
       "      <td>0.922594</td>\n",
       "      <td>0.997738</td>\n",
       "      <td>0.954060</td>\n",
       "      <td>0.999453</td>\n",
       "      <td>0.920619</td>\n",
       "      <td>0.990022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>0.959872</td>\n",
       "      <td>0.999523</td>\n",
       "      <td>0.923790</td>\n",
       "      <td>0.998886</td>\n",
       "      <td>0.951057</td>\n",
       "      <td>0.999441</td>\n",
       "      <td>0.911514</td>\n",
       "      <td>0.994186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>0.962395</td>\n",
       "      <td>0.999563</td>\n",
       "      <td>0.930791</td>\n",
       "      <td>0.996221</td>\n",
       "      <td>0.955686</td>\n",
       "      <td>0.999472</td>\n",
       "      <td>0.927461</td>\n",
       "      <td>0.985683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>0.954448</td>\n",
       "      <td>0.999457</td>\n",
       "      <td>0.914734</td>\n",
       "      <td>0.997768</td>\n",
       "      <td>0.952804</td>\n",
       "      <td>0.999460</td>\n",
       "      <td>0.917647</td>\n",
       "      <td>0.990762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>0.958879</td>\n",
       "      <td>0.999521</td>\n",
       "      <td>0.922942</td>\n",
       "      <td>0.997728</td>\n",
       "      <td>0.949921</td>\n",
       "      <td>0.999396</td>\n",
       "      <td>0.915650</td>\n",
       "      <td>0.986857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>0.957024</td>\n",
       "      <td>0.999496</td>\n",
       "      <td>0.920139</td>\n",
       "      <td>0.996990</td>\n",
       "      <td>0.952330</td>\n",
       "      <td>0.999434</td>\n",
       "      <td>0.915551</td>\n",
       "      <td>0.992188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>0.962016</td>\n",
       "      <td>0.999546</td>\n",
       "      <td>0.928718</td>\n",
       "      <td>0.997791</td>\n",
       "      <td>0.947851</td>\n",
       "      <td>0.999421</td>\n",
       "      <td>0.911797</td>\n",
       "      <td>0.986874</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Fold  F1_train  Accuracy_train  Precision_train  Recall_train   F1_test  \\\n",
       "0     0  0.958041        0.999506         0.922650      0.996255  0.950270   \n",
       "0     1  0.961328        0.999551         0.928144      0.996973  0.950474   \n",
       "0     2  0.955235        0.999481         0.916229      0.997710  0.952136   \n",
       "0     3  0.958696        0.999517         0.922594      0.997738  0.954060   \n",
       "0     4  0.959872        0.999523         0.923790      0.998886  0.951057   \n",
       "0     5  0.962395        0.999563         0.930791      0.996221  0.955686   \n",
       "0     6  0.954448        0.999457         0.914734      0.997768  0.952804   \n",
       "0     7  0.958879        0.999521         0.922942      0.997728  0.949921   \n",
       "0     8  0.957024        0.999496         0.920139      0.996990  0.952330   \n",
       "0     9  0.962016        0.999546         0.928718      0.997791  0.947851   \n",
       "\n",
       "   Accuracy_test  Precision_test  Recall_test  \n",
       "0       0.999415        0.909938     0.994344  \n",
       "0       0.999402        0.913880     0.990121  \n",
       "0       0.999409        0.916749     0.990364  \n",
       "0       0.999453        0.920619     0.990022  \n",
       "0       0.999441        0.911514     0.994186  \n",
       "0       0.999472        0.927461     0.985683  \n",
       "0       0.999460        0.917647     0.990762  \n",
       "0       0.999396        0.915650     0.986857  \n",
       "0       0.999434        0.915551     0.992188  \n",
       "0       0.999421        0.911797     0.986874  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kfold_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da00395d",
   "metadata": {
    "papermill": {
     "duration": 0.048476,
     "end_time": "2024-07-13T15:37:13.180426",
     "exception": false,
     "start_time": "2024-07-13T15:37:13.131950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "282e8ef4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:13.277739Z",
     "iopub.status.busy": "2024-07-13T15:37:13.277385Z",
     "iopub.status.idle": "2024-07-13T15:37:13.909674Z",
     "shell.execute_reply": "2024-07-13T15:37:13.908753Z"
    },
    "papermill": {
     "duration": 0.682938,
     "end_time": "2024-07-13T15:37:13.911491",
     "exception": false,
     "start_time": "2024-07-13T15:37:13.228553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Melt the DataFrame to have a single column for metric type\n",
    "melted_df = pd.melt(kfold_df, id_vars=['Fold'], var_name='Metric_Type', value_name='Value')\n",
    "\n",
    "# Plotting using Seaborn\n",
    "plt.figure(figsize=(12, 4))\n",
    "sns.barplot(x='Fold', y='Value', hue='Metric_Type', data=melted_df, palette='muted')\n",
    "plt.title('Metrics Across Folds')\n",
    "plt.xlabel('Fold')\n",
    "plt.ylabel('Value')\n",
    "plt.legend(title='Metric Type')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "192ec884",
   "metadata": {
    "papermill": {
     "duration": 0.048228,
     "end_time": "2024-07-13T15:37:14.008617",
     "exception": false,
     "start_time": "2024-07-13T15:37:13.960389",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Final Model Prediction <a id=\"final-model-prediction\"></a>\n",
    "[Back to Table of Contents](#back-to-table-of-contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "628d8367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:14.106918Z",
     "iopub.status.busy": "2024-07-13T15:37:14.106598Z",
     "iopub.status.idle": "2024-07-13T15:37:14.127576Z",
     "shell.execute_reply": "2024-07-13T15:37:14.126131Z"
    },
    "papermill": {
     "duration": 0.072236,
     "end_time": "2024-07-13T15:37:14.129461",
     "exception": false,
     "start_time": "2024-07-13T15:37:14.057225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_IDs</th>\n",
       "      <th>hourStep</th>\n",
       "      <th>oldBalanceOfOrigStudent_send</th>\n",
       "      <th>newBalanceOfOrigStudent_send</th>\n",
       "      <th>transactionAmount_send</th>\n",
       "      <th>oldBalanceOfDestStudent_recieve</th>\n",
       "      <th>newBalanceOfDestStudent_recieve</th>\n",
       "      <th>transactionAmount_recieve</th>\n",
       "      <th>StudentAge_orig</th>\n",
       "      <th>StudentYear_orig</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionFrequency_dest_MEDIUM</th>\n",
       "      <th>AccountType_dest_INDIVIDUAL</th>\n",
       "      <th>AccountType_dest_JOINT/SHARED</th>\n",
       "      <th>First_IdOfOrigStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_C</th>\n",
       "      <th>First_IdOfDestStudent_M</th>\n",
       "      <th>part_of_day_Afternoon</th>\n",
       "      <th>part_of_day_Evening</th>\n",
       "      <th>part_of_day_Morning</th>\n",
       "      <th>part_of_day_Night</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>793539</th>\n",
       "      <td>2271313</td>\n",
       "      <td>208.0</td>\n",
       "      <td>10022.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>542198.91</td>\n",
       "      <td>107435.47</td>\n",
       "      <td>649634.38</td>\n",
       "      <td>542198.91</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749849</th>\n",
       "      <td>2222950</td>\n",
       "      <td>303.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>455261.72</td>\n",
       "      <td>708540.42</td>\n",
       "      <td>1163802.14</td>\n",
       "      <td>455261.72</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>956053</th>\n",
       "      <td>2448120</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>90186.15</td>\n",
       "      <td>11085939.32</td>\n",
       "      <td>11176125.47</td>\n",
       "      <td>90186.15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>903252</th>\n",
       "      <td>2390165</td>\n",
       "      <td>43.0</td>\n",
       "      <td>11279.00</td>\n",
       "      <td>119796.01</td>\n",
       "      <td>108517.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>934712</th>\n",
       "      <td>2424622</td>\n",
       "      <td>372.0</td>\n",
       "      <td>3727311.15</td>\n",
       "      <td>3873280.21</td>\n",
       "      <td>145969.07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 70 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        All_IDs  hourStep  oldBalanceOfOrigStudent_send  \\\n",
       "793539  2271313     208.0                      10022.00   \n",
       "749849  2222950     303.0                          0.00   \n",
       "956053  2448120     204.0                          0.00   \n",
       "903252  2390165      43.0                      11279.00   \n",
       "934712  2424622     372.0                    3727311.15   \n",
       "\n",
       "        newBalanceOfOrigStudent_send  transactionAmount_send  \\\n",
       "793539                          0.00               542198.91   \n",
       "749849                          0.00               455261.72   \n",
       "956053                          0.00                90186.15   \n",
       "903252                     119796.01               108517.01   \n",
       "934712                    3873280.21               145969.07   \n",
       "\n",
       "        oldBalanceOfDestStudent_recieve  newBalanceOfDestStudent_recieve  \\\n",
       "793539                        107435.47                        649634.38   \n",
       "749849                        708540.42                       1163802.14   \n",
       "956053                      11085939.32                      11176125.47   \n",
       "903252                              NaN                              NaN   \n",
       "934712                              NaN                              NaN   \n",
       "\n",
       "        transactionAmount_recieve  StudentAge_orig  StudentYear_orig  ...  \\\n",
       "793539                  542198.91             18.0               1.0  ...   \n",
       "749849                  455261.72             20.0               2.0  ...   \n",
       "956053                   90186.15              NaN               NaN  ...   \n",
       "903252                        NaN              NaN               NaN  ...   \n",
       "934712                        NaN             16.0               4.0  ...   \n",
       "\n",
       "        TransactionFrequency_dest_MEDIUM  AccountType_dest_INDIVIDUAL  \\\n",
       "793539                                 1                            1   \n",
       "749849                                 0                            0   \n",
       "956053                                 1                            0   \n",
       "903252                                 1                            1   \n",
       "934712                                 0                            1   \n",
       "\n",
       "        AccountType_dest_JOINT/SHARED  First_IdOfOrigStudent_C  \\\n",
       "793539                              0                        1   \n",
       "749849                              0                        1   \n",
       "956053                              1                        1   \n",
       "903252                              0                        1   \n",
       "934712                              0                        1   \n",
       "\n",
       "        First_IdOfDestStudent_C  First_IdOfDestStudent_M  \\\n",
       "793539                        1                        0   \n",
       "749849                        1                        0   \n",
       "956053                        1                        0   \n",
       "903252                        1                        0   \n",
       "934712                        1                        0   \n",
       "\n",
       "        part_of_day_Afternoon  part_of_day_Evening  part_of_day_Morning  \\\n",
       "793539                      0                    0                    0   \n",
       "749849                      0                    0                    0   \n",
       "956053                      0                    0                    0   \n",
       "903252                      0                    1                    0   \n",
       "934712                      0                    0                    0   \n",
       "\n",
       "        part_of_day_Night  \n",
       "793539                  1  \n",
       "749849                  1  \n",
       "956053                  1  \n",
       "903252                  0  \n",
       "934712                  1  \n",
       "\n",
       "[5 rows x 70 columns]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "f7ca2549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:14.232228Z",
     "iopub.status.busy": "2024-07-13T15:37:14.231891Z",
     "iopub.status.idle": "2024-07-13T15:37:15.421670Z",
     "shell.execute_reply": "2024-07-13T15:37:15.420601Z"
    },
    "papermill": {
     "duration": 1.243041,
     "end_time": "2024-07-13T15:37:15.423412",
     "exception": false,
     "start_time": "2024-07-13T15:37:14.180371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2535"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(model.predict(predict_df[important_features]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "5b584b49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:15.527253Z",
     "iopub.status.busy": "2024-07-13T15:37:15.526927Z",
     "iopub.status.idle": "2024-07-13T15:37:16.717136Z",
     "shell.execute_reply": "2024-07-13T15:37:16.716055Z"
    },
    "papermill": {
     "duration": 1.244889,
     "end_time": "2024-07-13T15:37:16.719356",
     "exception": false,
     "start_time": "2024-07-13T15:37:15.474467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['All_IDs', 'hourStep', 'oldBalanceOfOrigStudent_send',\n",
       "       'newBalanceOfOrigStudent_send', 'transactionAmount_send',\n",
       "       'oldBalanceOfDestStudent_recieve', 'newBalanceOfDestStudent_recieve',\n",
       "       'transactionAmount_recieve', 'StudentAge_orig', 'StudentYear_orig',\n",
       "       'NumberOfTransactionsTillDate_orig', 'StudentAge_dest',\n",
       "       'StudentYear_dest', 'NumberOfTransactionsTillDate_dest', 'isHacker',\n",
       "       'week_number', 'month', 'day_of_month', 'day_of_week', 'hour_of_day',\n",
       "       'old_send_new_send', 'old_rec_new_rec', 'old_rec_new_rec_amt_rec',\n",
       "       'old_send_new_send_amt_rec', 'hourstep_radians', 'cosine', 'sine',\n",
       "       'num_transactions_IdOfOrigStudent',\n",
       "       'num_hacker_transactions_IdOfOrigStudent',\n",
       "       'num_transactions_IdOfDestStudent',\n",
       "       'num_hacker_transactions_IdOfDestStudent',\n",
       "       'transactionType_cash inflow', 'transactionType_cash outflow',\n",
       "       'transactionType_debit to acct', 'transactionType_money payment',\n",
       "       'transactionType_money transfer', 'transaction_device_ATM card',\n",
       "       'transaction_device_Check', 'transaction_device_Net Banking',\n",
       "       'transaction_device_UPI', 'comments_Done at super market.',\n",
       "       'comments_Purchased groceries', 'comments_betting',\n",
       "       'comments_breakfast', 'comments_dinner', 'comments_drinks',\n",
       "       'comments_eatables', 'comments_food', 'comments_laundry rent',\n",
       "       'comments_loan', 'comments_lunch', 'comments_purchased stationary',\n",
       "       'comments_room rent', 'TransactionFrequency_orig_HIGH',\n",
       "       'TransactionFrequency_orig_LOW', 'TransactionFrequency_orig_MEDIUM',\n",
       "       'AccountType_orig_INDIVIDUAL', 'AccountType_orig_JOINT/SHARED',\n",
       "       'TransactionFrequency_dest_HIGH', 'TransactionFrequency_dest_LOW',\n",
       "       'TransactionFrequency_dest_MEDIUM', 'AccountType_dest_INDIVIDUAL',\n",
       "       'AccountType_dest_JOINT/SHARED', 'First_IdOfOrigStudent_C',\n",
       "       'First_IdOfDestStudent_C', 'First_IdOfDestStudent_M',\n",
       "       'part_of_day_Afternoon', 'part_of_day_Evening', 'part_of_day_Morning',\n",
       "       'part_of_day_Night'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "predict_df['isHacker'] = model.predict_proba(predict_df[important_features])[:, 1]\n",
    "predict_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "9386ee27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:16.822160Z",
     "iopub.status.busy": "2024-07-13T15:37:16.821845Z",
     "iopub.status.idle": "2024-07-13T15:37:16.829346Z",
     "shell.execute_reply": "2024-07-13T15:37:16.828289Z"
    },
    "papermill": {
     "duration": 0.06134,
     "end_time": "2024-07-13T15:37:16.831502",
     "exception": false,
     "start_time": "2024-07-13T15:37:16.770162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "793539     0.000007\n",
       "749849     0.000014\n",
       "956053     0.000006\n",
       "903252     0.000002\n",
       "934712     0.000030\n",
       "             ...   \n",
       "1048559    0.000007\n",
       "1048561    0.000013\n",
       "1048565    0.000063\n",
       "1048569    0.999821\n",
       "1048570    0.000004\n",
       "Name: isHacker, Length: 419431, dtype: float32"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_df['isHacker'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "82c0e844",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:16.935250Z",
     "iopub.status.busy": "2024-07-13T15:37:16.934932Z",
     "iopub.status.idle": "2024-07-13T15:37:16.940610Z",
     "shell.execute_reply": "2024-07-13T15:37:16.939752Z"
    },
    "papermill": {
     "duration": 0.059774,
     "end_time": "2024-07-13T15:37:16.942581",
     "exception": false,
     "start_time": "2024-07-13T15:37:16.882807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['TID', 'isHacker']"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(Sample_Submission.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "3e899dc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:17.044504Z",
     "iopub.status.busy": "2024-07-13T15:37:17.044155Z",
     "iopub.status.idle": "2024-07-13T15:37:17.051335Z",
     "shell.execute_reply": "2024-07-13T15:37:17.050498Z"
    },
    "papermill": {
     "duration": 0.059749,
     "end_time": "2024-07-13T15:37:17.053042",
     "exception": false,
     "start_time": "2024-07-13T15:37:16.993293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Sample_Submission_1=predict_df[['All_IDs','isHacker']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "89056da8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:17.158351Z",
     "iopub.status.busy": "2024-07-13T15:37:17.158011Z",
     "iopub.status.idle": "2024-07-13T15:37:17.163381Z",
     "shell.execute_reply": "2024-07-13T15:37:17.162218Z"
    },
    "papermill": {
     "duration": 0.060926,
     "end_time": "2024-07-13T15:37:17.165544",
     "exception": false,
     "start_time": "2024-07-13T15:37:17.104618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Sample_Submission_1.rename(columns={'All_IDs': 'TID'}, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "324895a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:17.269123Z",
     "iopub.status.busy": "2024-07-13T15:37:17.268798Z",
     "iopub.status.idle": "2024-07-13T15:37:17.762463Z",
     "shell.execute_reply": "2024-07-13T15:37:17.761367Z"
    },
    "papermill": {
     "duration": 0.548182,
     "end_time": "2024-07-13T15:37:17.765174",
     "exception": false,
     "start_time": "2024-07-13T15:37:17.216992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Sample_Submission_1.to_csv(\"result.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38efdb3a",
   "metadata": {
    "papermill": {
     "duration": 0.050147,
     "end_time": "2024-07-13T15:37:17.868035",
     "exception": false,
     "start_time": "2024-07-13T15:37:17.817888",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Post Modelling and Prediction Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d34b920",
   "metadata": {
    "papermill": {
     "duration": 0.051518,
     "end_time": "2024-07-13T15:37:17.970830",
     "exception": false,
     "start_time": "2024-07-13T15:37:17.919312",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Check the number of total predicted on the unseen data and this number should be in the similar ratio of processed data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "119a677c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-13T15:37:18.081891Z",
     "iopub.status.busy": "2024-07-13T15:37:18.081585Z",
     "iopub.status.idle": "2024-07-13T15:37:18.090275Z",
     "shell.execute_reply": "2024-07-13T15:37:18.089234Z"
    },
    "papermill": {
     "duration": 0.069096,
     "end_time": "2024-07-13T15:37:18.092069",
     "exception": false,
     "start_time": "2024-07-13T15:37:18.022973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2535"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sample_Submission_1[Sample_Submission_1['isHacker']>=.5]['isHacker'].size"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebd357bb",
   "metadata": {
    "papermill": {
     "duration": 0.051084,
     "end_time": "2024-07-13T15:37:18.197261",
     "exception": false,
     "start_time": "2024-07-13T15:37:18.146177",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Hurrey!! we have completed the HACKTHON"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ffe86f4",
   "metadata": {
    "papermill": {
     "duration": 0.050803,
     "end_time": "2024-07-13T15:37:18.299831",
     "exception": false,
     "start_time": "2024-07-13T15:37:18.249028",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4621076,
     "sourceId": 7874773,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30664,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 597.902134,
   "end_time": "2024-07-13T15:37:21.070517",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-13T15:27:23.168383",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
